{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./src/pages/troubleshooting/ibm-cloud-access-nfs-server.mdx","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-troubleshooting-ibm-cloud-access-nfs-server-mdx-d606159f921414b2ce87.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Access NFS server provisioned on IBM Cloud`}</h1>\n    <p>{`When choosing the “simple” sample configuration for ROKS VPC on IBM Cloud, the deployer also provisions a Virtual Server Instance and installs a standard NFS server on it. In some cases you may want to get access to the NFS server for troubleshooting.`}</p>\n    <p>{`For security reasons, the NFS server can only be reached via a bastion server that is connected to the internet, i.e. use the bastion server as a jump host, this to avoid exposing NFS volumes to the outside world and provide an extra layer of protection. Additionally, password login is disabled on both the bastion and NFS servers and one must use the private SSH key to connect.`}</p>\n    <h2>{`Start the command line within the container`}</h2>\n    <p>{`Getting SSH access to the NFS server is easiest from within the deployer container as it has all tools installed to extract the IP addresses from the Terraform state file.`}</p>\n    <p>{`Optional: Ensure that the environment variables for the configuration and status directories are set. If not specified, the directories are assumed to be `}<inlineCode parentName=\"p\">{`$HOME/cpd-config`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`$HOME/cpd-status`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`export STATUS_DIR=$HOME/cpd-status\nexport CONFIG_DIR=$HOME/cpd-config\n`}</code></pre>\n    <p>{`Start the deployer command line.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./cp-deploy.sh env command\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-output\"\n      }}>{`-------------------------------------------------------------------------------\nEntering Cloud Pak Deployer command line in a container.\nUse the \"exit\" command to leave the container and return to the hosting server.\n-------------------------------------------------------------------------------\nInstalling OpenShift client\nCurrent OpenShift context: pluto-01\n`}</code></pre>\n    <h2>{`Obtain private SSH key`}</h2>\n    <p>{`Access to both the bastion and NFS servers are typically protected by the same SSH key, which is stored in the vault. To list all vault secrets, run the command below.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cd /cloud-pak-deployer\n./cp-deploy.sh vault list\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-output\"\n      }}>{`./cp-deploy.sh vault list\n\nStarting Automation script...\n\nPLAY [Secrets] *****************************************************************\nSecret list for group sample:\n- ibm_cp_entitlement_key\n- sample-terraform-tfstate\n- cp4d_admin_zen_40_fke34d\n- sample-all-config\n- pluto-01-provision-ssh-key\n- pluto-01-provision-ssh-pub-key\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=11   changed=0    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0\n`}</code></pre>\n    <p>{`Then, retrieve the private key (in the above example `}<inlineCode parentName=\"p\">{`pluto-01-provision-ssh-key`}</inlineCode>{`) to an output file in your `}<inlineCode parentName=\"p\">{`~/.ssh`}</inlineCode>{` directory, make sure it has the correct private key format (new line at the end) and permissions (600).`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`SSH_FILE=~/.ssh/pluto-01-rsa\nmkdir -p ~/.ssh\nchmod 600 ~/.ssh\n./cp-deploy.sh vault get -vs pluto-01-provision-ssh-key \\\\\n    -vsf $SSH_FILE\necho -e \"\\\\n\" >> $SSH_FILE\nchmod 600 $SSH_FILE\n`}</code></pre>\n    <h2>{`Find the IP addresses`}</h2>\n    <p>{`To connect to the NFS server, you need the public IP address of the bastion server and the private IP address of the NFS server. Obviously these can be retrieved from the IBM Cloud resource list (`}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/resources\"\n      }}>{`https://cloud.ibm.com/resources`}</a>{`), but they are also kept in the Terraform “tfstate” file`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./cp-deploy.sh vault get -vs sample-terraform-tfstate \\\\\n    -vsf /tmp/sample-terraform-tfstate\n`}</code></pre>\n    <p>{`The below commands do not provide the prettiest output but you should be able to extract the IP addresses from them.`}</p>\n    <p>{`For the bastion node public (floating) IP address:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cat /tmp/sample-terraform-tfstate | jq -r '.resources[]' | grep -A 10 -E \"ibm_is_float\"\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-output\"\n      }}>{`  \"type\": \"ibm_is_floating_ip\",\n  \"name\": \"pluto_01_bastion\",\n  \"provider\": \"provider[\\\\\"registry.terraform.io/ibm-cloud/ibm\\\\\"]\",\n  \"instances\": [\n    {\n      \"schema_version\": 0,\n      \"attributes\": {\n        \"address\": \"149.81.215.172\",\n...\n        \"name\": \"pluto-01-bastion\",\n`}</code></pre>\n    <p>{`For the NFS server:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cat /tmp/sample-terraform-tfstate | jq -r '.resources[]' | grep -A 10 -E \"ibm_is_instance|primary_network_interface\"\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-output\"\n      }}>{`...\n--\n  \"type\": \"ibm_is_instance\",\n  \"name\": \"pluto_01_nfs\",\n  \"provider\": \"provider[\\\\\"registry.terraform.io/ibm-cloud/ibm\\\\\"]\",\n  \"instances\": [\n...\n--\n        \"primary_network_interface\": [\n...\n            \"name\": \"pluto-01-nfs-nic\",\n            \"port_speed\": 0,\n            \"primary_ipv4_address\": \"10.227.0.138\",\n`}</code></pre>\n    <p>{`In the above examples, the IP addresses are:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Bastion public IP address: `}<inlineCode parentName=\"li\">{`149.81.215.172`}</inlineCode></li>\n      <li parentName=\"ul\">{`NFS server private IP address: `}<inlineCode parentName=\"li\">{`10.227.0.138`}</inlineCode></li>\n    </ul>\n    <h2>{`SSH to the NFS server`}</h2>\n    <p>{`Finally, to get command line access to the NFS server:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`BASTION_IP=149.81.215.172\nNFS_IP=10.227.0.138\nssh -i $SSH_FILE \\\\\n  -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \\\\\n  -i $SSH_FILE -W %h:%p -q $BASTION_IP\" \\\\\n  root@$NFS_IP\n`}</code></pre>\n    <h2>{`Stopping the session`}</h2>\n    <p>{`Once you’ve finished exploring the NFS server, you can exit from it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`exit\n`}</code></pre>\n    <p>{`Finally, exit from the deployer container which is then terminated.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`exit\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};"],"sourceRoot":""}