{"componentChunkName":"component---src-pages-troubleshooting-ibm-cloud-access-nfs-server-mdx","path":"/troubleshooting/ibm-cloud-access-nfs-server/","result":{"pageContext":{"frontmatter":{"title":"Access NFS server provisioned on IBM Cloud"},"relativePagePath":"/troubleshooting/ibm-cloud-access-nfs-server.mdx","titleType":"page","MdxNode":{"id":"55f058d8-f5fd-5d1a-8a0b-b6242be920bc","children":[],"parent":"5a582135-814c-505b-890a-3541cfa1e4c9","internal":{"content":"---\ntitle: Access NFS server provisioned on IBM Cloud\n---\n\n# Access NFS server provisioned on IBM Cloud\nWhen choosing the \"simple\" sample configuration for ROKS VPC on IBM Cloud, the deployer also provisions a Virtual Server Instance and installs a standard NFS server on it. In some cases you may want to get access to the NFS server for troubleshooting.\n\nFor security reasons, the NFS server can only be reached via a bastion server that is connected to the internet, i.e. use the bastion server as a jump host, this to avoid exposing NFS volumes to the outside world and provide an extra layer of protection. Additionally, password login is disabled on both the bastion and NFS servers and one must use the private SSH key to connect.\n\n## Start the command line within the container\nGetting SSH access to the NFS server is easiest from within the deployer container as it has all tools installed to extract the IP addresses from the Terraform state file.\n\nEnsure that your `CONFIG_DIR` and `STATUS_DIR` environment variables have been set and then run the deployer command.\n```\nexport STATUS_DIR=/data/status/sample\nexport CONFIG_DIR=/data/config/sample\n```\n\nStart the deployer command line.\n```\n./cp-deploy.sh env command\n```\n\n```output\n-------------------------------------------------------------------------------\nEntering Cloud Pak Deployer command line in a container.\nUse the \"exit\" command to leave the container and return to the hosting server.\n-------------------------------------------------------------------------------\nInstalling OpenShift client\nCurrent OpenShift context: pluto-01\n```\n\n## Obtain private SSH key\nAccess to both the bastion and NFS servers are typically protected by the same SSH key, which is stored in the vault. To list all vault secrets, run the command below.\n\n```\ncd /cloud-pak-deployer\n./cp-deploy.sh vault list\n```\n\n```output\n./cp-deploy.sh vault list\n\nStarting Automation script...\n\nPLAY [Secrets] *****************************************************************\nSecret list for group sample:\n- ibm_cp_entitlement_key\n- sample-terraform-tfstate\n- cp4d_admin_zen_40_fke34d\n- sample-all-config\n- pluto-01-provision-ssh-key\n- pluto-01-provision-ssh-pub-key\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=11   changed=0    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0\n```\n\nThen, retrieve the private key (in the above example `pluto-01-provision-ssh-key`) to an output file in your `~/.ssh` directory, make sure it has the correct private key format (new line at the end) and permissions (600).\n```\nSSH_FILE=~/.ssh/pluto-01-rsa\nmkdir -p ~/.ssh\nchmod 600 ~/.ssh\n./cp-deploy.sh vault get -vs pluto-01-provision-ssh-key \\\n    -vsf $SSH_FILE\necho -e \"\\n\" >> $SSH_FILE\nchmod 600 $SSH_FILE\n```\n\n\n## Find the IP addresses\nTo connect to the NFS server, you need the public IP address of the bastion server and the private IP address of the NFS server. Obviously these can be retrieved from the IBM Cloud resource list (https://cloud.ibm.com/resources), but they are also kept in the Terraform \"tfstate\" file\n\n```\n./cp-deploy.sh vault get -vs sample-terraform-tfstate \\\n    -vsf /tmp/sample-terraform-tfstate\n```\n\nThe below commands do not provide the prettiest output but you should be able to extract the IP addresses from them.\n\nFor the bastion node public (floating) IP address:\n```\ncat /tmp/sample-terraform-tfstate | jq -r '.resources[]' | grep -A 10 -E \"ibm_is_float\"\n```\n\n```output\n  \"type\": \"ibm_is_floating_ip\",\n  \"name\": \"pluto_01_bastion\",\n  \"provider\": \"provider[\\\"registry.terraform.io/ibm-cloud/ibm\\\"]\",\n  \"instances\": [\n    {\n      \"schema_version\": 0,\n      \"attributes\": {\n        \"address\": \"149.81.215.172\",\n...\n        \"name\": \"pluto-01-bastion\",\n```\n\nFor the NFS server:\n```\ncat /tmp/sample-terraform-tfstate | jq -r '.resources[]' | grep -A 10 -E \"ibm_is_instance|primary_network_interface\"\n```\n\n```output\n...\n--\n  \"type\": \"ibm_is_instance\",\n  \"name\": \"pluto_01_nfs\",\n  \"provider\": \"provider[\\\"registry.terraform.io/ibm-cloud/ibm\\\"]\",\n  \"instances\": [\n...\n--\n        \"primary_network_interface\": [\n...\n            \"name\": \"pluto-01-nfs-nic\",\n            \"port_speed\": 0,\n            \"primary_ipv4_address\": \"10.227.0.138\",\n```\n\nIn the above examples, the IP addresses are:\n* Bastion public IP address: `149.81.215.172`\n* NFS server private IP address: `10.227.0.138`\n\n## SSH to the NFS server\nFinally, to get command line access to the NFS server:\n```\nBASTION_IP=149.81.215.172\nNFS_IP=10.227.0.138\nssh -i $SSH_FILE \\\n  -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \\\n  -i $SSH_FILE -W %h:%p -q $BASTION_IP\" \\\n  root@$NFS_IP\n```\n\n## Stopping the session\nOnce you've finished exploring the NFS server, you can exit from it:\n```\nexit\n```\n\nFinally, exit from the deployer container which is then terminated.\n```\nexit\n```","type":"Mdx","contentDigest":"50b7c4ee6c6c18152e6219840852de66","owner":"gatsby-plugin-mdx","counter":194},"frontmatter":{"title":"Access NFS server provisioned on IBM Cloud"},"exports":{},"rawBody":"---\ntitle: Access NFS server provisioned on IBM Cloud\n---\n\n# Access NFS server provisioned on IBM Cloud\nWhen choosing the \"simple\" sample configuration for ROKS VPC on IBM Cloud, the deployer also provisions a Virtual Server Instance and installs a standard NFS server on it. In some cases you may want to get access to the NFS server for troubleshooting.\n\nFor security reasons, the NFS server can only be reached via a bastion server that is connected to the internet, i.e. use the bastion server as a jump host, this to avoid exposing NFS volumes to the outside world and provide an extra layer of protection. Additionally, password login is disabled on both the bastion and NFS servers and one must use the private SSH key to connect.\n\n## Start the command line within the container\nGetting SSH access to the NFS server is easiest from within the deployer container as it has all tools installed to extract the IP addresses from the Terraform state file.\n\nEnsure that your `CONFIG_DIR` and `STATUS_DIR` environment variables have been set and then run the deployer command.\n```\nexport STATUS_DIR=/data/status/sample\nexport CONFIG_DIR=/data/config/sample\n```\n\nStart the deployer command line.\n```\n./cp-deploy.sh env command\n```\n\n```output\n-------------------------------------------------------------------------------\nEntering Cloud Pak Deployer command line in a container.\nUse the \"exit\" command to leave the container and return to the hosting server.\n-------------------------------------------------------------------------------\nInstalling OpenShift client\nCurrent OpenShift context: pluto-01\n```\n\n## Obtain private SSH key\nAccess to both the bastion and NFS servers are typically protected by the same SSH key, which is stored in the vault. To list all vault secrets, run the command below.\n\n```\ncd /cloud-pak-deployer\n./cp-deploy.sh vault list\n```\n\n```output\n./cp-deploy.sh vault list\n\nStarting Automation script...\n\nPLAY [Secrets] *****************************************************************\nSecret list for group sample:\n- ibm_cp_entitlement_key\n- sample-terraform-tfstate\n- cp4d_admin_zen_40_fke34d\n- sample-all-config\n- pluto-01-provision-ssh-key\n- pluto-01-provision-ssh-pub-key\n\nPLAY RECAP *********************************************************************\nlocalhost                  : ok=11   changed=0    unreachable=0    failed=0    skipped=21   rescued=0    ignored=0\n```\n\nThen, retrieve the private key (in the above example `pluto-01-provision-ssh-key`) to an output file in your `~/.ssh` directory, make sure it has the correct private key format (new line at the end) and permissions (600).\n```\nSSH_FILE=~/.ssh/pluto-01-rsa\nmkdir -p ~/.ssh\nchmod 600 ~/.ssh\n./cp-deploy.sh vault get -vs pluto-01-provision-ssh-key \\\n    -vsf $SSH_FILE\necho -e \"\\n\" >> $SSH_FILE\nchmod 600 $SSH_FILE\n```\n\n\n## Find the IP addresses\nTo connect to the NFS server, you need the public IP address of the bastion server and the private IP address of the NFS server. Obviously these can be retrieved from the IBM Cloud resource list (https://cloud.ibm.com/resources), but they are also kept in the Terraform \"tfstate\" file\n\n```\n./cp-deploy.sh vault get -vs sample-terraform-tfstate \\\n    -vsf /tmp/sample-terraform-tfstate\n```\n\nThe below commands do not provide the prettiest output but you should be able to extract the IP addresses from them.\n\nFor the bastion node public (floating) IP address:\n```\ncat /tmp/sample-terraform-tfstate | jq -r '.resources[]' | grep -A 10 -E \"ibm_is_float\"\n```\n\n```output\n  \"type\": \"ibm_is_floating_ip\",\n  \"name\": \"pluto_01_bastion\",\n  \"provider\": \"provider[\\\"registry.terraform.io/ibm-cloud/ibm\\\"]\",\n  \"instances\": [\n    {\n      \"schema_version\": 0,\n      \"attributes\": {\n        \"address\": \"149.81.215.172\",\n...\n        \"name\": \"pluto-01-bastion\",\n```\n\nFor the NFS server:\n```\ncat /tmp/sample-terraform-tfstate | jq -r '.resources[]' | grep -A 10 -E \"ibm_is_instance|primary_network_interface\"\n```\n\n```output\n...\n--\n  \"type\": \"ibm_is_instance\",\n  \"name\": \"pluto_01_nfs\",\n  \"provider\": \"provider[\\\"registry.terraform.io/ibm-cloud/ibm\\\"]\",\n  \"instances\": [\n...\n--\n        \"primary_network_interface\": [\n...\n            \"name\": \"pluto-01-nfs-nic\",\n            \"port_speed\": 0,\n            \"primary_ipv4_address\": \"10.227.0.138\",\n```\n\nIn the above examples, the IP addresses are:\n* Bastion public IP address: `149.81.215.172`\n* NFS server private IP address: `10.227.0.138`\n\n## SSH to the NFS server\nFinally, to get command line access to the NFS server:\n```\nBASTION_IP=149.81.215.172\nNFS_IP=10.227.0.138\nssh -i $SSH_FILE \\\n  -o ProxyCommand=\"ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \\\n  -i $SSH_FILE -W %h:%p -q $BASTION_IP\" \\\n  root@$NFS_IP\n```\n\n## Stopping the session\nOnce you've finished exploring the NFS server, you can exit from it:\n```\nexit\n```\n\nFinally, exit from the deployer container which is then terminated.\n```\nexit\n```","fileAbsolutePath":"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/src/pages/troubleshooting/ibm-cloud-access-nfs-server.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}