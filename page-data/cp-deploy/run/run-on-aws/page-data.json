{"componentChunkName":"component---src-pages-cp-deploy-run-run-on-aws-mdx","path":"/cp-deploy/run/run-on-aws/","result":{"pageContext":{"frontmatter":{"title":"Run on AWS","tabs":["Run on IBM Cloud","Run on vSphere","Run on AWS","Run on Microsoft Azure - ARO","Run on existing OpenShift"]},"relativePagePath":"/cp-deploy/run/run-on-aws.mdx","titleType":"page","MdxNode":{"id":"45139498-7356-5d80-bbd5-0678967e4751","children":[],"parent":"97f817cd-6f5f-568b-b531-94306e5f9f3d","internal":{"content":"---\ntitle: Run on AWS\ntabs:\n  [\n    \"Run on IBM Cloud\",\n    \"Run on vSphere\",\n    \"Run on AWS\",\n    \"Run on Microsoft Azure - ARO\",\n    \"Run on existing OpenShift\",\n  ]\n---\n\n# Running the Cloud Pak Deployer on AWS\n\nOn Amazon Web Services (AWS), OpenShift can be set up in various ways. The Cloud Pak Deployer currently implements one of them: ROSA (Red Hat OpenShift on AWS), which is a managed service so that customers can focus on the deployment and running of applications. More information about ROSA can be found here: https://aws.amazon.com/rosa/\n\n## Topology\n\nA typical setup of the ROSA cluster is pictured below:\n![ROSA configuration](aws-rosa-ocs.png)\n\nWhen deploying ROSA, an external host name and domain name are automatically generated by Amazon Web Services and both the API and Ingress servers can be resolved by external clients. At this stage, one cannot configure the domain name to be used.\n\n## Enable ROSA on AWS\n\nBefore you can use ROSA on AWS, you have to enable it if this has not been done already. This can be done as follows:\n\n- Go to https://aws.amazon.com/\n- Login to the AWS console\n- Search for **ROSA service**\n- Click **Enable OpenShift**\n\n## Obtain the AWS IAM credentials\n\nYou will need an **Access Key ID** and **Secret Access Key** for the deployer to run `rosa` commands.\n\n- Go to https://aws.amazon.com/\n- Login to the AWS console\n- Click on your user name at the top right of the screen\n- Select **Security credentials**. You can also reach this screen via https://console.aws.amazon.com/iam/home?region=us-east-2#/security_credentials.\n- If you do not yet have an access key (or you no longer have the associated secret), create an access key\n- Store your **Access Key ID** and **Secret Access Key** in safe place\n\n## Obtain your ROSA login token\n\nTo run `rosa` commands to manage the cluster, the deployer requires the ROSA login token.\n\n- Go to https://cloud.redhat.com/openshift/token/rosa\n- Login with your Red Hat user ID and password. If you don't have one yet, you need to create it.\n- Copy the offline access token presented on the screen and store it in a safe place.\n\n## Acquire an IBM Cloud Pak Entitlement Key\n\nIf you want to pull the Cloud Pak images from the entitled registry (i.e. an online install), or if you want to mirror the images to your private registry, you need to download the entitlement key. You can skip this step if you're installing from a private registry and all Cloud Pak images have already been downloaded to the private registry.\n\n- Navigate to https://myibm.ibm.com/products-services/containerlibrary and login with your IBMId credentials\n- Select **Get Entitlement Key** and create a new key (or copy your existing key)\n- Copy the key value\n\n<InlineNotification kind=\"warning\">\n  As stated for the API key, you can choose to download the entitlement key to a\n  file. However, when we reference the entitlement key, we mean the 80+\n  character string that is displayed, not the file.\n</InlineNotification>\n\n## Prepare for running\n\n### Set environment variables\n\n```\nexport AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_access_key\nexport ROSA_LOGIN_TOKEN=\"your_rosa_login_token\"\nexport CP_ENTITLEMENT_KEY=your_cp_entitlement_key\n\nexport STATUS_DIR=/data/status/sample\nexport CONFIG_DIR=/data/config/sample\n```\n\n- `AWS_ACCESS_KEY`: This is the AWS Access Key you retrieved above, often this is something like `AK1A2VLMPQWBJJQGD6GV`\n- `AWS_SECRET_ACCESS_KEY`: The secret associated with your AWS Access Key, also retrieved above\n- `ROSA_LOGIN_TOKEN`: The offline access token that was retrieved before. This is a very long string (200+ characters). Make sure you enclose the string in single or double quotes as it may hold special characters\n- `CP_ENTITLEMENT_KEY`: This is the entitlement key you acquired as per the instructions above, this is a 80+ character string\n- `STATUS_DIR`: The directory where the Cloud Pak Deployer keeps all status information and logs files. **Please note** that if you have chosen to use a File Vault, the properties file is keps under the `vault` directory within the status directory\n- `CONFIG_DIR`: Directory that holds the configuration, it must have `config`, `defaults` and `inventory` subdirectories\n\n<InlineNotification>\n  Cloud Pak Deployer uses the status directory to logs its activities and also\n  to keep track of its running state. For a given environment you're\n  provisioning or destroying, you should always specify the same status\n  directory to avoid contention between different deploy runs. You can run the\n  Cloud Pak Deployer in parallel for different environments (different\n  configuration directories).\n</InlineNotification>\n\n### Create the secrets needed for ROSA cluster\n\nYou need to store the below credentials in the vault so that the deployer has access to them when doing the ROSA install.\n\n```\n./cp-deploy.sh vault set \\\n    --vault-secret aws-access-key \\\n    --vault-secret-value $AWS_ACCESS_KEY_ID\n\n./cp-deploy.sh vault set \\\n    --vault-secret aws-secret-access-key \\\n    --vault-secret-value $AWS_SECRET_ACCESS_KEY\n\n./cp-deploy.sh vault set \\\n    --vault-secret rosa-login-token \\\n    --vault-secret-value $ROSA_LOGIN_TOKEN\n```\n\n## Optional: validate the configuration\n\nIf you only want to validate the configuration, you can run the dpeloyer with the `--check-only` argument. This will run the first stage to validate variables and vault secrets and then execute the generators.\n\n```\n./cp-deploy.sh env apply -e env_id=pluto-01 --check-only [--accept-all-licenses]\n```\n\n## Run the Cloud Pak Deployer\n\nTo run the container using a local configuration input directory and a data directory where temporary and state is kept, use the example below. If you don't specify the status directory, the deployer will automatically create a temporary directory. Please note that the status directory will also hold secrets if you have configured a flat file vault. If you lose the directory, you will not be able to make changes to the configuration and adjust the deployment. It is best to specify a permanent directory that you can reuse later. If you specify an existing directory the current user **must** be the owner of the directory. Failing to do so may cause the container to fail with insufficient permissions.\n\n```\n./cp-deploy.sh env apply -e env_id=pluto-01 [--accept-all-licenses]\n```\n\nIn the above command, the `env_id` extra variable defines the names of the objects that are being created; these are referenced in the `.yaml` configuration files as `{{ env_id }}`. For more information about the extra (dynamic) variables, see [advanced configuration](/advanced/advanced-configuration).\n\nThe `--accept-all-licenses` flag is optional and confirms that you accept all licenses of the installed cartridges and instances. Licenses must be either accepted in the configuration files or at the command line.\n\nWhen running the command, the container will start as a daemon and the command will tail-follow the logs. You can press Ctrl-C at any time to interrupt the logging but the container will continue to run in the background.\n\nYou can return to view the logs as follows:\n\n```\n./cp-deploy.sh env logs\n```\n\nDeploying the infrastructure, preparing OpenShift and installing the Cloud Pak will take a long time, typically between 1-5 hours,dependent on which Cloud Pak cartridges you configured. For estimated duration of the steps, refer to [Timings](/cpd-design/timings).\n\nIf you need to interrupt the automation, use CTRL-C to stop the logging output and then use:\n\n```\n./cp-deploy.sh env kill\n```\n\n## On failure\n\nIf the Cloud Pak Deployer fails, for example because certain infrastructure components are temporarily not available, fix the cause if needed and then just re-run it with the same `CONFIG_DIR` and `STATUS_DIR` as well extra variables. The provisioning process has been designed to be idempotent and it will not redo actions that have already completed successfully.\n\n## Finishing up\n\nOnce the process has finished, it will output the URLs by which you can access the deployed Cloud Pak. You can also find this information under the `cloud-paks` directory in the status directory you specified.\n\nTo retrieve the Cloud Pak URL(s):\n\n```\ncat $STATUS_DIR/cloud-paks/*\n```\n\nThis will show the Cloud Pak URLs:\n\n```output\nCloud Pak for Data URL for cluster pluto-01 and project zen-40:\nhttps://cpd-zen-40.apps.pluto-01.pmxz.p1.openshiftapps.com\n```\n\nThe `admin` password can be retrieved from the vault as follows:\n\nList the secrets in the vault:\n\n```\n./cp-deploy.sh vault list\n```\n\nThis will show something similar to the following:\n\n```output\nSecret list for group sample:\n- aws-access-key\n- aws-secret-access-key\n- ibm_cp_entitlement_key\n- rosa-login-token\n- pluto-01-cluster-admin-password\n- cp4d_admin_zen_40_pluto_01\n- all-config\n```\n\nYou can then retrieve the Cloud Pak for Data admin password like this:\n\n```\n./cp-deploy.sh vault get --vault-secret cp4d_admin_zen_40_pluto_01\n```\n\n```output\nPLAY [Secrets] *****************************************************************\nincluded: /cloud-pak-deployer/automation-roles/99-generic/vault/vault-get-secret/tasks/get-secret-file.yml for localhost\ncp4d_admin_zen_40_pluto_01: gelGKrcgaLatBsnAdMEbmLwGr\n```\n\n## Post-install configuration\nYou can find examples of a couple of typical changes you may want to do here: [Post-run changes](/cp-deploy/post-run).\n","type":"Mdx","contentDigest":"094508b5585db8ad406138cd025a18ef","owner":"gatsby-plugin-mdx","counter":204},"frontmatter":{"title":"Run on AWS","tabs":["Run on IBM Cloud","Run on vSphere","Run on AWS","Run on Microsoft Azure - ARO","Run on existing OpenShift"]},"exports":{},"rawBody":"---\ntitle: Run on AWS\ntabs:\n  [\n    \"Run on IBM Cloud\",\n    \"Run on vSphere\",\n    \"Run on AWS\",\n    \"Run on Microsoft Azure - ARO\",\n    \"Run on existing OpenShift\",\n  ]\n---\n\n# Running the Cloud Pak Deployer on AWS\n\nOn Amazon Web Services (AWS), OpenShift can be set up in various ways. The Cloud Pak Deployer currently implements one of them: ROSA (Red Hat OpenShift on AWS), which is a managed service so that customers can focus on the deployment and running of applications. More information about ROSA can be found here: https://aws.amazon.com/rosa/\n\n## Topology\n\nA typical setup of the ROSA cluster is pictured below:\n![ROSA configuration](aws-rosa-ocs.png)\n\nWhen deploying ROSA, an external host name and domain name are automatically generated by Amazon Web Services and both the API and Ingress servers can be resolved by external clients. At this stage, one cannot configure the domain name to be used.\n\n## Enable ROSA on AWS\n\nBefore you can use ROSA on AWS, you have to enable it if this has not been done already. This can be done as follows:\n\n- Go to https://aws.amazon.com/\n- Login to the AWS console\n- Search for **ROSA service**\n- Click **Enable OpenShift**\n\n## Obtain the AWS IAM credentials\n\nYou will need an **Access Key ID** and **Secret Access Key** for the deployer to run `rosa` commands.\n\n- Go to https://aws.amazon.com/\n- Login to the AWS console\n- Click on your user name at the top right of the screen\n- Select **Security credentials**. You can also reach this screen via https://console.aws.amazon.com/iam/home?region=us-east-2#/security_credentials.\n- If you do not yet have an access key (or you no longer have the associated secret), create an access key\n- Store your **Access Key ID** and **Secret Access Key** in safe place\n\n## Obtain your ROSA login token\n\nTo run `rosa` commands to manage the cluster, the deployer requires the ROSA login token.\n\n- Go to https://cloud.redhat.com/openshift/token/rosa\n- Login with your Red Hat user ID and password. If you don't have one yet, you need to create it.\n- Copy the offline access token presented on the screen and store it in a safe place.\n\n## Acquire an IBM Cloud Pak Entitlement Key\n\nIf you want to pull the Cloud Pak images from the entitled registry (i.e. an online install), or if you want to mirror the images to your private registry, you need to download the entitlement key. You can skip this step if you're installing from a private registry and all Cloud Pak images have already been downloaded to the private registry.\n\n- Navigate to https://myibm.ibm.com/products-services/containerlibrary and login with your IBMId credentials\n- Select **Get Entitlement Key** and create a new key (or copy your existing key)\n- Copy the key value\n\n<InlineNotification kind=\"warning\">\n  As stated for the API key, you can choose to download the entitlement key to a\n  file. However, when we reference the entitlement key, we mean the 80+\n  character string that is displayed, not the file.\n</InlineNotification>\n\n## Prepare for running\n\n### Set environment variables\n\n```\nexport AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_access_key\nexport ROSA_LOGIN_TOKEN=\"your_rosa_login_token\"\nexport CP_ENTITLEMENT_KEY=your_cp_entitlement_key\n\nexport STATUS_DIR=/data/status/sample\nexport CONFIG_DIR=/data/config/sample\n```\n\n- `AWS_ACCESS_KEY`: This is the AWS Access Key you retrieved above, often this is something like `AK1A2VLMPQWBJJQGD6GV`\n- `AWS_SECRET_ACCESS_KEY`: The secret associated with your AWS Access Key, also retrieved above\n- `ROSA_LOGIN_TOKEN`: The offline access token that was retrieved before. This is a very long string (200+ characters). Make sure you enclose the string in single or double quotes as it may hold special characters\n- `CP_ENTITLEMENT_KEY`: This is the entitlement key you acquired as per the instructions above, this is a 80+ character string\n- `STATUS_DIR`: The directory where the Cloud Pak Deployer keeps all status information and logs files. **Please note** that if you have chosen to use a File Vault, the properties file is keps under the `vault` directory within the status directory\n- `CONFIG_DIR`: Directory that holds the configuration, it must have `config`, `defaults` and `inventory` subdirectories\n\n<InlineNotification>\n  Cloud Pak Deployer uses the status directory to logs its activities and also\n  to keep track of its running state. For a given environment you're\n  provisioning or destroying, you should always specify the same status\n  directory to avoid contention between different deploy runs. You can run the\n  Cloud Pak Deployer in parallel for different environments (different\n  configuration directories).\n</InlineNotification>\n\n### Create the secrets needed for ROSA cluster\n\nYou need to store the below credentials in the vault so that the deployer has access to them when doing the ROSA install.\n\n```\n./cp-deploy.sh vault set \\\n    --vault-secret aws-access-key \\\n    --vault-secret-value $AWS_ACCESS_KEY_ID\n\n./cp-deploy.sh vault set \\\n    --vault-secret aws-secret-access-key \\\n    --vault-secret-value $AWS_SECRET_ACCESS_KEY\n\n./cp-deploy.sh vault set \\\n    --vault-secret rosa-login-token \\\n    --vault-secret-value $ROSA_LOGIN_TOKEN\n```\n\n## Optional: validate the configuration\n\nIf you only want to validate the configuration, you can run the dpeloyer with the `--check-only` argument. This will run the first stage to validate variables and vault secrets and then execute the generators.\n\n```\n./cp-deploy.sh env apply -e env_id=pluto-01 --check-only [--accept-all-licenses]\n```\n\n## Run the Cloud Pak Deployer\n\nTo run the container using a local configuration input directory and a data directory where temporary and state is kept, use the example below. If you don't specify the status directory, the deployer will automatically create a temporary directory. Please note that the status directory will also hold secrets if you have configured a flat file vault. If you lose the directory, you will not be able to make changes to the configuration and adjust the deployment. It is best to specify a permanent directory that you can reuse later. If you specify an existing directory the current user **must** be the owner of the directory. Failing to do so may cause the container to fail with insufficient permissions.\n\n```\n./cp-deploy.sh env apply -e env_id=pluto-01 [--accept-all-licenses]\n```\n\nIn the above command, the `env_id` extra variable defines the names of the objects that are being created; these are referenced in the `.yaml` configuration files as `{{ env_id }}`. For more information about the extra (dynamic) variables, see [advanced configuration](/advanced/advanced-configuration).\n\nThe `--accept-all-licenses` flag is optional and confirms that you accept all licenses of the installed cartridges and instances. Licenses must be either accepted in the configuration files or at the command line.\n\nWhen running the command, the container will start as a daemon and the command will tail-follow the logs. You can press Ctrl-C at any time to interrupt the logging but the container will continue to run in the background.\n\nYou can return to view the logs as follows:\n\n```\n./cp-deploy.sh env logs\n```\n\nDeploying the infrastructure, preparing OpenShift and installing the Cloud Pak will take a long time, typically between 1-5 hours,dependent on which Cloud Pak cartridges you configured. For estimated duration of the steps, refer to [Timings](/cpd-design/timings).\n\nIf you need to interrupt the automation, use CTRL-C to stop the logging output and then use:\n\n```\n./cp-deploy.sh env kill\n```\n\n## On failure\n\nIf the Cloud Pak Deployer fails, for example because certain infrastructure components are temporarily not available, fix the cause if needed and then just re-run it with the same `CONFIG_DIR` and `STATUS_DIR` as well extra variables. The provisioning process has been designed to be idempotent and it will not redo actions that have already completed successfully.\n\n## Finishing up\n\nOnce the process has finished, it will output the URLs by which you can access the deployed Cloud Pak. You can also find this information under the `cloud-paks` directory in the status directory you specified.\n\nTo retrieve the Cloud Pak URL(s):\n\n```\ncat $STATUS_DIR/cloud-paks/*\n```\n\nThis will show the Cloud Pak URLs:\n\n```output\nCloud Pak for Data URL for cluster pluto-01 and project zen-40:\nhttps://cpd-zen-40.apps.pluto-01.pmxz.p1.openshiftapps.com\n```\n\nThe `admin` password can be retrieved from the vault as follows:\n\nList the secrets in the vault:\n\n```\n./cp-deploy.sh vault list\n```\n\nThis will show something similar to the following:\n\n```output\nSecret list for group sample:\n- aws-access-key\n- aws-secret-access-key\n- ibm_cp_entitlement_key\n- rosa-login-token\n- pluto-01-cluster-admin-password\n- cp4d_admin_zen_40_pluto_01\n- all-config\n```\n\nYou can then retrieve the Cloud Pak for Data admin password like this:\n\n```\n./cp-deploy.sh vault get --vault-secret cp4d_admin_zen_40_pluto_01\n```\n\n```output\nPLAY [Secrets] *****************************************************************\nincluded: /cloud-pak-deployer/automation-roles/99-generic/vault/vault-get-secret/tasks/get-secret-file.yml for localhost\ncp4d_admin_zen_40_pluto_01: gelGKrcgaLatBsnAdMEbmLwGr\n```\n\n## Post-install configuration\nYou can find examples of a couple of typical changes you may want to do here: [Post-run changes](/cp-deploy/post-run).\n","fileAbsolutePath":"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/src/pages/cp-deploy/run/run-on-aws.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}