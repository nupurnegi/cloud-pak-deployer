{"componentChunkName":"component---src-pages-advanced-advanced-configuration-index-mdx","path":"/advanced/advanced-configuration/","result":{"pageContext":{"frontmatter":{"title":"Advanced Configuration"},"relativePagePath":"/advanced/advanced-configuration/index.mdx","titleType":"page","MdxNode":{"id":"dad4f724-b883-5919-be3c-53f7cdc4df0b","children":[],"parent":"4f32b5d5-86f2-54b0-899e-2d0d6dd48535","internal":{"content":"---\ntitle: Advanced Configuration\n---\n\n# Cloud Pak Deployer Advanced Configuration\n\n## Using dynamic variables (extra variables)\nIn some situations you may want to use a single configuration for deployment in different environments, such as development, acceptance test and production. The Cloud Pak Deployer uses the Jinja2 templating engine which is included in Ansible to pre-process the configuration. This allows you to dynamically adjust the configuration based on extra variables you specify at the command line.\n\nExample:\n```\n./cp-deploy.sh env apply -e env_id=pluto-01 -e ibm_cloud_region=eu_gb [--accept-all-liceneses]\n```\n\nThis passes the `env_id` and `ibm_cloud_region` variables to the Cloud Pak Deployer, which can then populate variables in the configuration. In the sample configurations, the `env_id` is used to specify the name of the VPC, ROKS cluster and others and the `ibm_cloud_region` overrides region specified in the inventory file.\n\n```\n...\nvpc:\n- name: \"{{ env_id }}\"\n  allow_inbound: ['ssh']\n\naddress_prefix:\n### Prefixes for the client environment\n- name: \"{{ env_id }}-zone-1\"\n  vpc: \"{{ env_id }}\"\n  zone: {{ ibm_cloud_region }}-1\n  cidr: 10.231.0.0/26\n...\n```\n\nWhen running with the above `cp-deploy.sh` command, the snippet would be generated as:\n```\n...\nvpc:\n- name: \"pluto-01\"\n  allow_inbound: ['ssh']\n\naddress_prefix:\n### Prefixes for the client environment\n- name: \"pluto-01-zone-1\"\n  vpc: \"pluto-01\"\n  zone: eu-de-1\n  cidr: 10.231.0.0/26\n...\n```\n\nThe `ibm_cloud_region` variable is specified in the inventory file. This is another method of specifying variables for dynamic configuration.\n\nYou can even include more complex constructs for dynamic configuration, with `if` statements, `for` loops and others.\n\nAn example where the OpenShift OCS storage classes would only be generated for a specific environment (pluto-prod) would be:\n```\n  openshift_storage:\n  - storage_name: nfs-storage\n    storage_type: nfs\n    nfs_server_name: \"{{ env_id }}-nfs\"\n{% if env_id == 'pluto-prod' %}\n  - storage_name: ocs-storage\n    storage_type: ocs\n    ocs_storage_label: ocs\n    ocs_storage_size_gb: 500\n{% endif %}\n```\n\nFor a more comprehensive overview of Jinja2 templating, see https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html\n\n## Using a private registry for Cloud Pak images\nIf you want to pull the Cloud Pak container images from a private registry, you need to define an `image_registry` object that is referenced by, for example, the `cp4d` object.\n\nAt runtime of the deployer and if the Cloud Pak entitlement key is available in the vault, the images associated with the case files will be mirrored to the specified registry. When the Cloud Pak definition references a private registry, the pull secret will be updated with the private registry location and credentials.\n\nFor more information on how to define a private registry, take a look at the [image_registry](/cpd-design/objects/cloud-paks#image_registry) object.","type":"Mdx","contentDigest":"a23bb7da2eb5773d66a6f4d811e10752","owner":"gatsby-plugin-mdx","counter":196},"frontmatter":{"title":"Advanced Configuration"},"exports":{},"rawBody":"---\ntitle: Advanced Configuration\n---\n\n# Cloud Pak Deployer Advanced Configuration\n\n## Using dynamic variables (extra variables)\nIn some situations you may want to use a single configuration for deployment in different environments, such as development, acceptance test and production. The Cloud Pak Deployer uses the Jinja2 templating engine which is included in Ansible to pre-process the configuration. This allows you to dynamically adjust the configuration based on extra variables you specify at the command line.\n\nExample:\n```\n./cp-deploy.sh env apply -e env_id=pluto-01 -e ibm_cloud_region=eu_gb [--accept-all-liceneses]\n```\n\nThis passes the `env_id` and `ibm_cloud_region` variables to the Cloud Pak Deployer, which can then populate variables in the configuration. In the sample configurations, the `env_id` is used to specify the name of the VPC, ROKS cluster and others and the `ibm_cloud_region` overrides region specified in the inventory file.\n\n```\n...\nvpc:\n- name: \"{{ env_id }}\"\n  allow_inbound: ['ssh']\n\naddress_prefix:\n### Prefixes for the client environment\n- name: \"{{ env_id }}-zone-1\"\n  vpc: \"{{ env_id }}\"\n  zone: {{ ibm_cloud_region }}-1\n  cidr: 10.231.0.0/26\n...\n```\n\nWhen running with the above `cp-deploy.sh` command, the snippet would be generated as:\n```\n...\nvpc:\n- name: \"pluto-01\"\n  allow_inbound: ['ssh']\n\naddress_prefix:\n### Prefixes for the client environment\n- name: \"pluto-01-zone-1\"\n  vpc: \"pluto-01\"\n  zone: eu-de-1\n  cidr: 10.231.0.0/26\n...\n```\n\nThe `ibm_cloud_region` variable is specified in the inventory file. This is another method of specifying variables for dynamic configuration.\n\nYou can even include more complex constructs for dynamic configuration, with `if` statements, `for` loops and others.\n\nAn example where the OpenShift OCS storage classes would only be generated for a specific environment (pluto-prod) would be:\n```\n  openshift_storage:\n  - storage_name: nfs-storage\n    storage_type: nfs\n    nfs_server_name: \"{{ env_id }}-nfs\"\n{% if env_id == 'pluto-prod' %}\n  - storage_name: ocs-storage\n    storage_type: ocs\n    ocs_storage_label: ocs\n    ocs_storage_size_gb: 500\n{% endif %}\n```\n\nFor a more comprehensive overview of Jinja2 templating, see https://docs.ansible.com/ansible/latest/user_guide/playbooks_templating.html\n\n## Using a private registry for Cloud Pak images\nIf you want to pull the Cloud Pak container images from a private registry, you need to define an `image_registry` object that is referenced by, for example, the `cp4d` object.\n\nAt runtime of the deployer and if the Cloud Pak entitlement key is available in the vault, the images associated with the case files will be mirrored to the specified registry. When the Cloud Pak definition references a private registry, the pull secret will be updated with the private registry location and credentials.\n\nFor more information on how to define a private registry, take a look at the [image_registry](/cpd-design/objects/cloud-paks#image_registry) object.","fileAbsolutePath":"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/src/pages/advanced/advanced-configuration/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}