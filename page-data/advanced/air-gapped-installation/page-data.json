{"componentChunkName":"component---src-pages-advanced-air-gapped-installation-index-mdx","path":"/advanced/air-gapped-installation/","result":{"pageContext":{"frontmatter":{"title":"Air-gapped installation"},"relativePagePath":"/advanced/air-gapped-installation/index.mdx","titleType":"page","MdxNode":{"id":"788651ea-216d-5317-a431-bf5d46d0ac81","children":[],"parent":"be6cda50-cc99-52bf-be62-e6a5c3bc7eac","internal":{"content":"---\ntitle: Air-gapped installation\n---\n# Air-gapped installation\n\nThe deployer can mirror images from the entitled registry to a private registry that you want to use for the Cloud Pak. \n\nThere are two methods for mirroring images to a private registry that the air-gapped OpenShift cluster can pull images from:\n* [Method 1 - Mirror images with a bastion node](#method-1-mirror-images-with-a-bastion-node). The bastion node can connect to the internet and to the private registry used by the OpenShift cluster. You run the deployer on the bastion node.\n* [Method 2 - Using an intermediate (portable) registry](#method-2-mirror-images-using-a-portable-image-registry). The private registry used by the OpenShift cluster cannot be reached from a machine that is connected to the internet. In this case you need a portable registry to download images and which you then ship to a server that can connect to the **existing ** OpenShift cluster and its private registry.\n\nThe two methods are also outlined in the Cloud Pak for Data installation documentation: https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=tasks-mirroring-images-your-private-container-registry\n\nFor specifying a private registry in the Cloud Pak Deployer configuration, please see [Private registry](/cpd-design/components/private-registry). Example of specifying a private registry with a self-signed certificate in the configuration:\n```\nimage_registry:\n- name: cpd409\n  registry_host_name: registry.coc.ibm.com\n  registry_port: 5000\n  registry_insecure: True\n```\n\nAlso, the `cp4d` instance must reference the `image_registry` object using the `image_registry_name`:\n```\ncp4d:\n- project: zen-40\n  openshift_cluster_name: {{ env_id }}\n  cp4d_version: 4.0.9\n  openshift_storage_name: ocs-storage\n  image_registry_name: cpd409\n```\n\n<InlineNotification kind=\"info\">\nThe deployer only supports using a private registry for the Cloud Pak images, not for OpenShift itself. Air-gapped installation of OpenShift is currently not in scope for the deployer.\n</InlineNotification>\n\nBelow we first outline the use of a private registry for the Cloud Pak installation, then we will continue with air-gapped installation. The main 3 directories that are needed for both types of air-gapped installations are:\n* Cloud Pak Deployer directory: `cloud-pak-deployer`\n* Configuration directory: The directory that holds a all the Cloud Pak Deployer configuration\n* Status directory: The directory that will hold all downloads, vault secrets, portable registry\n\n## Method 1 - Mirror images with a bastion node\nThis method is also sometimes referred to as \"semi-air-gapped\". Use this method when the private registry used by the OpenShift cluster **can be** reached from an internet-connected server or workstation. In this case the internet-connected machine can directly mirror the images to the private registry but it cannot do anything on the OpenShift cluster.\n\n![Semi-air-gapped](./semi-air-gapped.png)\n\n### On the computer connected to the internet\n* If there are restrictions regarding the internet sites that can be reached, ensure that the website domains the deployer needs are whitelisted. For a list of domains, check [locations to whitelist](/advanced/locations-to-whitelist)\n* Build the Cloud Pak Deployer image using `./cp-deploy.sh build`\n* Create or update the directory with the configuration; make sure all your Cloud Paks and cartridges are specified as well as an `image_registry` entry to identify the private registry\n* Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n* Export the CP_ENTITLEMENT_KEY environment variable with your Cloud Pak entitlement key\n* Create a vault secret holding the connection credentials for the private registry specified in the configuration (`image_registry`). For example:\n```\n./cp-deploy.sh vault set \\\n    -vs image-registry-cpd409 \\\n    -vsv \"admin:very_s3cret\"\n```\nIf the status directory does not exist it is created at this point\n* **Diagram step 1**. Run the deployer using the `./cp-deploy.sh env download --skip-portable-registry` command. For example:\n```\n./cp-deploy.sh env download \\\n    -e env_id=plutu-01 \\\n    --skip-portable-registry\n```\nThis will download all clients and then mirror images from the entitled registry to the privagte registry. If mirroring fails, fix the issue and just run the `env download` again.\n* Before saving the status directory, you can optionally remove the entitlement key from the vault:\n```\n./cp-deploy.sh vault delete \\\n    -vs cp_entitlement_key\n```\n* **Diagram step 2**. When the download finished successfully, re-run the deployer with `./cp-deploy.sh env save` command to save the registry and deployer container images to the status directory. For example:\n```\n./cp-deploy.sh env save\n```\n* **Diagram step 3**. Ship the `cloud-pak-deployer` direcory and configuration and status directories to a server that can be connected to the private registry and the OpenShift cluster. The total size of the directories should be relatively small, typically < 5 GB\n\n### On the bastion server that is not connected to the internet but is connected to the private registry and OpenShift cluster\n* **Diagram step 3**. Restore the directories to the bastion server\n    * `cloud-pak-deployer` directory\n    * Configuration and status directories\n* **Diagram step 4**. Use the instructions in [Run on existing OpenShift](/cp-deploy/run/run-on-existing-openshift), adding the `--air-gapped` and `--skip-mirror-images` flags, to start the deployer:\n    * Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n    * Set the CPD_AIRGAP environment variable to `true`\n    ```\n    export CPD_AIRGAP=true\n    ```\n    * Create a vault secret holding the credentials for the OpenShift cluster. For example: \n    ```\n    ./cp-deploy.sh vault set \\\n        -vs pluto-01-oc-login \\\n        -vsv \"oc login api.pluto-01.coc.ibm.com:6443 -u kubeadmin -p BmxQ5-KjBFx-FgztG-gpTF3 --insecure-skip-tls-verify\"\n    ```\n    * Run the `./cp-deploy.sh env apply --skip-mirror-images` command to start deployment of the Cloud Pak to the OpenShift cluster. For example:\n    ```\n    ./cp-deploy.sh env apply \\\n        -e env_id=pluto-01 \\\n        --skip-mirror-images\n    ```    \n    The `CPD_AIRGGAP` environment variable tells the deployer it will not download anything from the internet; `--skip-mirror-images` indicates that images are already available in the private registry that is included in the configuration (`image_registry`)\n\n## Method 2 - Mirror images using a portable image registry\nUse this method when the private registry used by the OpenShift cluster cannot be reached from an internet-connected machine. In this case you need a portable registry to download images and which you then ship to a server that can connect to the OpenShift cluster and its private registry.\n\n![Air-gapped using portable registry](./air-gapped-portable.png)\n\n<InlineNotification kind=\"warning\">\nPlease note that in this case the Cloud Pak Deployer expects an OpenShift cluster to be available already and will only work with an `existing-ocp` configuration. The bastion server does not have access to the internet and can therefore not instantiate an OpenShift cluster.\n</InlineNotification>\n\n### On the computer connected to the internet\n* If there are restrictions regarding the internet sites that can be reached, ensure that the website domains the deployer needs are whitelisted. For a list of domains, check [locations to whitelist](/advanced/locations-to-whitelist)\n* Build the Cloud Pak Deployer image using `cp-deploy.sh build`\n* Create or update the directory with the configuration, making sure all your Cloud Paks and cartridges are specified\n* Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n* Export the CP_ENTITLEMENT_KEY environment variable with your Cloud Pak entitlement key\n* **Diagram step 1**. Run the deployer using the `./cp-deploy.sh env download` command. For example:\n```\n./cp-deploy.sh env download \\\n    -e env_id=plutu-01\n```\nThis will download all clients, start the portable registry and then mirror images from the entitled registry to the portable registry. If mirroring fails, fix the issue and just run the `env download` again.\n* Before saving the status directory, you can optionally remove the entitlement key from the vault:\n```\n./cp-deploy.sh vault delete \\\n    -vs cp_entitlement_key\n```\n* **Diagram step 2**. When the download finished successfully, re-run the deployer with `./cp-deploy.sh env save` command to stop the portable registry and save the registry and deployer container images to the status directory. For example:\n```\n./cp-deploy.sh env save\n```\n* **Diagram step 3**. Ship the `cloud-pak-deployer` direcory and configuration and status directories to a server that can be connected to the private registry and the OpenShift cluster. The status directory now holds all assets required for the air-gapped installation and its size can be substantial (100+ GB). You may want to use multi-volume tar files if you are using network transfer\n\n### On the bastion server that is not connected to the internet but is connected to the private registry and OpenShift cluster\n* **Diagram step 3**. Restore the directories to the bastion server\n    * `cloud-pak-deployer` directory\n    * Configuration and status directories\n* **Diagram step 4**. Use the instructions in [Run on existing OpenShift](/cp-deploy/run/run-on-existing-openshift), adding the `--air-gapped` flag, to start the deployer:\n    * Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n    * Set the CPD_AIRGAP environment variable to `true`\n    ```\n    export CPD_AIRGAP=true\n    ```\n    * Create a vault secret holding the credentials for the OpenShift cluster. For example: \n    ```\n    ./cp-deploy.sh vault set \\\n        -vs pluto-01-oc-login \\\n        -vsv \"oc login api.pluto-01.coc.ibm.com:6443 -u kubeadmin -p BmxQ5-KjBFx-FgztG-gpTF3 --insecure-skip-tls-verify\"\n    ```\n    * Create a vault secret holding the connection credentials for the private registry specified in the configuration (`image_registry`). For example:\n    ```\n    ./cp-deploy.sh vault set \\\n        -vs image-registry-cpd409 \\\n        -vsv \"admin:very_s3cret\"\n    ```\n    * Run the `./cp-deploy.sh env apply` command to start deployment of the Cloud Pak to the OpenShift cluster. For example:\n    ```\n    ./cp-deploy.sh env apply \\\n        -e env_id=pluto-01\n    ```  \n    The `CPD_AIRGGAP` environment variable tells the deployer it will not download anything from the internet. As a first action, the deployer mirrors images from the portable registry to the private registry included in the configuration (`image_registry`)\n\n## Special settings for debug and DaemonSet images in air-gapped mode\nSpecifically when running the deployer on IBM Cloud ROKS, certain OpenShift settings must be applied using DaemonSets in the `kube-system` namespace. Additionally, the deployer uses the `oc debug node` commands to retrieve `kubelet` and `crio` configuration files from the compute nodes.\n\nThe default container images used by the DaemonSets and `oc debug node` commands are based on Red Hat's Universal Base Image and will be pulled from Red Hat registries. This is typically not possible in air-gapped installations, hence different images must be used. It is your responsibility to copy suitable (preferably UBI) images to an image registry that is connected to the OpenShift cluster. Also, if a pull secret is needed to pull the image(s) from the registry, you must create the associated secret in the `kube-system` OpenShift project.\n\nTo configure alternative container images for the deployer to use, set the following properties in the `.inv` file kept in your configuration's `inventory` directory, or specify them as additional command line parameters for the `cp-deploy.sh` command. \n\nIf you do not set these values, the deployer assumes that the default images are used for DaemonSet and `oc debug node`.\n\n| Property             | Description                                            | Example                        |\n| -------------------- | ------------------------------------------------------ | ------------------------------ |\n| cpd_oc_debug_image   | Container image to be used for the `oc debug` command. | `registry.redhat.io/rhel8/support-tools:latest` |\n| cpd_ds_image         | Container image to be used for the DaemonSets that configure Kubelet, etc. | `registry.access.redhat.com/ubi8/ubi:latest` |\n\nExample of using with `cp-deploy.sh`\n```\n./cp-deploy.sh env apply --air-gapped -e cpd_oc_debug_image=registry.redhat.io/rhel8/support-tools:latest\n```","type":"Mdx","contentDigest":"ae280e84c20c011cf4829881c48f355b","owner":"gatsby-plugin-mdx","counter":204},"frontmatter":{"title":"Air-gapped installation"},"exports":{},"rawBody":"---\ntitle: Air-gapped installation\n---\n# Air-gapped installation\n\nThe deployer can mirror images from the entitled registry to a private registry that you want to use for the Cloud Pak. \n\nThere are two methods for mirroring images to a private registry that the air-gapped OpenShift cluster can pull images from:\n* [Method 1 - Mirror images with a bastion node](#method-1-mirror-images-with-a-bastion-node). The bastion node can connect to the internet and to the private registry used by the OpenShift cluster. You run the deployer on the bastion node.\n* [Method 2 - Using an intermediate (portable) registry](#method-2-mirror-images-using-a-portable-image-registry). The private registry used by the OpenShift cluster cannot be reached from a machine that is connected to the internet. In this case you need a portable registry to download images and which you then ship to a server that can connect to the **existing ** OpenShift cluster and its private registry.\n\nThe two methods are also outlined in the Cloud Pak for Data installation documentation: https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=tasks-mirroring-images-your-private-container-registry\n\nFor specifying a private registry in the Cloud Pak Deployer configuration, please see [Private registry](/cpd-design/components/private-registry). Example of specifying a private registry with a self-signed certificate in the configuration:\n```\nimage_registry:\n- name: cpd409\n  registry_host_name: registry.coc.ibm.com\n  registry_port: 5000\n  registry_insecure: True\n```\n\nAlso, the `cp4d` instance must reference the `image_registry` object using the `image_registry_name`:\n```\ncp4d:\n- project: zen-40\n  openshift_cluster_name: {{ env_id }}\n  cp4d_version: 4.0.9\n  openshift_storage_name: ocs-storage\n  image_registry_name: cpd409\n```\n\n<InlineNotification kind=\"info\">\nThe deployer only supports using a private registry for the Cloud Pak images, not for OpenShift itself. Air-gapped installation of OpenShift is currently not in scope for the deployer.\n</InlineNotification>\n\nBelow we first outline the use of a private registry for the Cloud Pak installation, then we will continue with air-gapped installation. The main 3 directories that are needed for both types of air-gapped installations are:\n* Cloud Pak Deployer directory: `cloud-pak-deployer`\n* Configuration directory: The directory that holds a all the Cloud Pak Deployer configuration\n* Status directory: The directory that will hold all downloads, vault secrets, portable registry\n\n## Method 1 - Mirror images with a bastion node\nThis method is also sometimes referred to as \"semi-air-gapped\". Use this method when the private registry used by the OpenShift cluster **can be** reached from an internet-connected server or workstation. In this case the internet-connected machine can directly mirror the images to the private registry but it cannot do anything on the OpenShift cluster.\n\n![Semi-air-gapped](./semi-air-gapped.png)\n\n### On the computer connected to the internet\n* If there are restrictions regarding the internet sites that can be reached, ensure that the website domains the deployer needs are whitelisted. For a list of domains, check [locations to whitelist](/advanced/locations-to-whitelist)\n* Build the Cloud Pak Deployer image using `./cp-deploy.sh build`\n* Create or update the directory with the configuration; make sure all your Cloud Paks and cartridges are specified as well as an `image_registry` entry to identify the private registry\n* Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n* Export the CP_ENTITLEMENT_KEY environment variable with your Cloud Pak entitlement key\n* Create a vault secret holding the connection credentials for the private registry specified in the configuration (`image_registry`). For example:\n```\n./cp-deploy.sh vault set \\\n    -vs image-registry-cpd409 \\\n    -vsv \"admin:very_s3cret\"\n```\nIf the status directory does not exist it is created at this point\n* **Diagram step 1**. Run the deployer using the `./cp-deploy.sh env download --skip-portable-registry` command. For example:\n```\n./cp-deploy.sh env download \\\n    -e env_id=plutu-01 \\\n    --skip-portable-registry\n```\nThis will download all clients and then mirror images from the entitled registry to the privagte registry. If mirroring fails, fix the issue and just run the `env download` again.\n* Before saving the status directory, you can optionally remove the entitlement key from the vault:\n```\n./cp-deploy.sh vault delete \\\n    -vs cp_entitlement_key\n```\n* **Diagram step 2**. When the download finished successfully, re-run the deployer with `./cp-deploy.sh env save` command to save the registry and deployer container images to the status directory. For example:\n```\n./cp-deploy.sh env save\n```\n* **Diagram step 3**. Ship the `cloud-pak-deployer` direcory and configuration and status directories to a server that can be connected to the private registry and the OpenShift cluster. The total size of the directories should be relatively small, typically < 5 GB\n\n### On the bastion server that is not connected to the internet but is connected to the private registry and OpenShift cluster\n* **Diagram step 3**. Restore the directories to the bastion server\n    * `cloud-pak-deployer` directory\n    * Configuration and status directories\n* **Diagram step 4**. Use the instructions in [Run on existing OpenShift](/cp-deploy/run/run-on-existing-openshift), adding the `--air-gapped` and `--skip-mirror-images` flags, to start the deployer:\n    * Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n    * Set the CPD_AIRGAP environment variable to `true`\n    ```\n    export CPD_AIRGAP=true\n    ```\n    * Create a vault secret holding the credentials for the OpenShift cluster. For example: \n    ```\n    ./cp-deploy.sh vault set \\\n        -vs pluto-01-oc-login \\\n        -vsv \"oc login api.pluto-01.coc.ibm.com:6443 -u kubeadmin -p BmxQ5-KjBFx-FgztG-gpTF3 --insecure-skip-tls-verify\"\n    ```\n    * Run the `./cp-deploy.sh env apply --skip-mirror-images` command to start deployment of the Cloud Pak to the OpenShift cluster. For example:\n    ```\n    ./cp-deploy.sh env apply \\\n        -e env_id=pluto-01 \\\n        --skip-mirror-images\n    ```    \n    The `CPD_AIRGGAP` environment variable tells the deployer it will not download anything from the internet; `--skip-mirror-images` indicates that images are already available in the private registry that is included in the configuration (`image_registry`)\n\n## Method 2 - Mirror images using a portable image registry\nUse this method when the private registry used by the OpenShift cluster cannot be reached from an internet-connected machine. In this case you need a portable registry to download images and which you then ship to a server that can connect to the OpenShift cluster and its private registry.\n\n![Air-gapped using portable registry](./air-gapped-portable.png)\n\n<InlineNotification kind=\"warning\">\nPlease note that in this case the Cloud Pak Deployer expects an OpenShift cluster to be available already and will only work with an `existing-ocp` configuration. The bastion server does not have access to the internet and can therefore not instantiate an OpenShift cluster.\n</InlineNotification>\n\n### On the computer connected to the internet\n* If there are restrictions regarding the internet sites that can be reached, ensure that the website domains the deployer needs are whitelisted. For a list of domains, check [locations to whitelist](/advanced/locations-to-whitelist)\n* Build the Cloud Pak Deployer image using `cp-deploy.sh build`\n* Create or update the directory with the configuration, making sure all your Cloud Paks and cartridges are specified\n* Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n* Export the CP_ENTITLEMENT_KEY environment variable with your Cloud Pak entitlement key\n* **Diagram step 1**. Run the deployer using the `./cp-deploy.sh env download` command. For example:\n```\n./cp-deploy.sh env download \\\n    -e env_id=plutu-01\n```\nThis will download all clients, start the portable registry and then mirror images from the entitled registry to the portable registry. If mirroring fails, fix the issue and just run the `env download` again.\n* Before saving the status directory, you can optionally remove the entitlement key from the vault:\n```\n./cp-deploy.sh vault delete \\\n    -vs cp_entitlement_key\n```\n* **Diagram step 2**. When the download finished successfully, re-run the deployer with `./cp-deploy.sh env save` command to stop the portable registry and save the registry and deployer container images to the status directory. For example:\n```\n./cp-deploy.sh env save\n```\n* **Diagram step 3**. Ship the `cloud-pak-deployer` direcory and configuration and status directories to a server that can be connected to the private registry and the OpenShift cluster. The status directory now holds all assets required for the air-gapped installation and its size can be substantial (100+ GB). You may want to use multi-volume tar files if you are using network transfer\n\n### On the bastion server that is not connected to the internet but is connected to the private registry and OpenShift cluster\n* **Diagram step 3**. Restore the directories to the bastion server\n    * `cloud-pak-deployer` directory\n    * Configuration and status directories\n* **Diagram step 4**. Use the instructions in [Run on existing OpenShift](/cp-deploy/run/run-on-existing-openshift), adding the `--air-gapped` flag, to start the deployer:\n    * Export the CONFIG_DIR and STATUS_DIR environment variables to respectively point to the configuration directory and the status directory\n    * Set the CPD_AIRGAP environment variable to `true`\n    ```\n    export CPD_AIRGAP=true\n    ```\n    * Create a vault secret holding the credentials for the OpenShift cluster. For example: \n    ```\n    ./cp-deploy.sh vault set \\\n        -vs pluto-01-oc-login \\\n        -vsv \"oc login api.pluto-01.coc.ibm.com:6443 -u kubeadmin -p BmxQ5-KjBFx-FgztG-gpTF3 --insecure-skip-tls-verify\"\n    ```\n    * Create a vault secret holding the connection credentials for the private registry specified in the configuration (`image_registry`). For example:\n    ```\n    ./cp-deploy.sh vault set \\\n        -vs image-registry-cpd409 \\\n        -vsv \"admin:very_s3cret\"\n    ```\n    * Run the `./cp-deploy.sh env apply` command to start deployment of the Cloud Pak to the OpenShift cluster. For example:\n    ```\n    ./cp-deploy.sh env apply \\\n        -e env_id=pluto-01\n    ```  \n    The `CPD_AIRGGAP` environment variable tells the deployer it will not download anything from the internet. As a first action, the deployer mirrors images from the portable registry to the private registry included in the configuration (`image_registry`)\n\n## Special settings for debug and DaemonSet images in air-gapped mode\nSpecifically when running the deployer on IBM Cloud ROKS, certain OpenShift settings must be applied using DaemonSets in the `kube-system` namespace. Additionally, the deployer uses the `oc debug node` commands to retrieve `kubelet` and `crio` configuration files from the compute nodes.\n\nThe default container images used by the DaemonSets and `oc debug node` commands are based on Red Hat's Universal Base Image and will be pulled from Red Hat registries. This is typically not possible in air-gapped installations, hence different images must be used. It is your responsibility to copy suitable (preferably UBI) images to an image registry that is connected to the OpenShift cluster. Also, if a pull secret is needed to pull the image(s) from the registry, you must create the associated secret in the `kube-system` OpenShift project.\n\nTo configure alternative container images for the deployer to use, set the following properties in the `.inv` file kept in your configuration's `inventory` directory, or specify them as additional command line parameters for the `cp-deploy.sh` command. \n\nIf you do not set these values, the deployer assumes that the default images are used for DaemonSet and `oc debug node`.\n\n| Property             | Description                                            | Example                        |\n| -------------------- | ------------------------------------------------------ | ------------------------------ |\n| cpd_oc_debug_image   | Container image to be used for the `oc debug` command. | `registry.redhat.io/rhel8/support-tools:latest` |\n| cpd_ds_image         | Container image to be used for the DaemonSets that configure Kubelet, etc. | `registry.access.redhat.com/ubi8/ubi:latest` |\n\nExample of using with `cp-deploy.sh`\n```\n./cp-deploy.sh env apply --air-gapped -e cpd_oc_debug_image=registry.redhat.io/rhel8/support-tools:latest\n```","fileAbsolutePath":"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/src/pages/advanced/air-gapped-installation/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}