{"componentChunkName":"component---src-pages-development-deployer-development-setup-index-mdx","path":"/development/deployer-development-setup/","result":{"pageContext":{"frontmatter":{"title":"Development setup"},"relativePagePath":"/development/deployer-development-setup/index.mdx","titleType":"page","MdxNode":{"id":"ad5d7575-1006-5833-9c16-7627de78231b","children":[],"parent":"ad372b71-e290-54df-84c4-1bcedf5df7b5","internal":{"content":"---\ntitle: Development setup\n---\n\n# Deployer Development Setup\nSetting up a virtual machine or server to develop the Cloud Pak Deployer code. Focuses on initial setup of a server to run the deployer container, setting up Visual Studio Code, issuing GPG keys and running the deployer in development mode.\n\n## Set up a server for development\nWe recommend to use a Red Hat Linux server for development of the Cloud Pak Deployer, either using a virtual server in the cloud or a virtual machine on your workstation. Ideally you run Visual Studio Code on your workstation and connect it to the remote Red Hat Linux server, updating the code and running it immediately from that server.\n\n### Install required packages\nTo allow for remote development, a number of packages need to be installed on the Linux server. Not having these will cause VSCode not to work and the error messages are difficult to debug. To install these packages, run the following as the `root` user:\n```\nyum install -y git podman wget unzip tar gpg pinentry\n```\n\nAdditionally, you can also install EPEL and `screen` to make it easier to keep your session if it gets disconnected.\n```\nyum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\nyum install -y screen\n```\n\n### Set up development user\nIt is recommended to use a special development user (your user name) on the Linux server, rather than using `root`. Not only will this be more secure; it also prevent destructive mistakes. In the below steps, we create a user `fk-dev` and give it `sudo` permissions.\n\n```\nuseradd -G wheel fk-dev\n```\n\nTo give the `fk-dev` permissions to run commands as `root`, change the `sudo` settings.\n```\nvisudo\n```\n\nScroll down until you see the following line:\n```\n# %wheel        ALL=(ALL)       NOPASSWD: ALL\n```\n\nChange the line to look like this:\n```\n%wheel        ALL=(ALL)       NOPASSWD: ALL\n```\n\nNow, save the file by pressing Esc, followed by `:` and `x`.\n\n### Configure password-less SSH for development user\nEspecially when running the virtual server in the cloud, users would logon using their SSH key. This requires the public key of the workstation to be added to the development user's SSH configuration.\n\nMake sure you run the following commands as the development user (fk-dev):\n```\nmkdir -p ~/.ssh\nchmod 700 ~/.ssh\ntouch ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n```\n\nThen, add the public key of your workstation to the `authorized_keys` file.\n```\nvi ~/.ssh/authorized_keys\n```\n\nPress the `i` to enter insert mode for `vi`. Then paste the public SSH key, for example:\n```\nssh-rsa AAAAB3NzaC1yc2EAAAADAXABAAABAQEGUeXJr0ZHy1SPGOntmr/7ixmK3KV8N3q/+0eSfKVTyGbhUO9lC1+oYcDvwMrizAXBJYWkIIwx4WgC77a78....fP3S5WYgqL fk-dev\n```\n\nFinally save the file by pressing Esc, followed by `:` and `x`.\n\n### Configure Git for the development user\nRun the following commands as the development user (fk-dev):\n```\ngit config --global user.name \"Your full name\"\ngit config --global user.email \"your_email_address\"\ngit config --global credential.helper \"cache --timeout=86400\"\n```\n\n### Set up GPG for the development user\nWe also want to ensure that commits are verified (trusted) by signing them with a GPG key. This requires set up on the development server and also on your Git account.\n\nFirst, set up a new GPG key:\n```\ngpg --default-new-key-algo rsa4096 --gen-key\n```\n\nYou will be prompted to specify your user information:\n* Real name: Enter your full name\n* Email address: Your e-mail address that will be used to sign the commits\n\nPress `o` at the following prompt:\n```\nChange (N)ame, (E)mail, or (O)kay/(Q)uit?\n```\n\nThen, you will be prompted for a passphrase. You cannot use a passphrase for your GPG key if you want to use it for automatic signing of commits. Just press Enter multiple times until the GPG key has been generated.\n\nList the signatures of the known keys. You will use the signature to sign the commits and to retrieve the public key.\n```\ngpg --list-signatures\n```\n\nOutput will look something like this:\n```output\n/home/fk-dev/.gnupg/pubring.kbx\n-----------------------------------\npub   rsa4096 2022-10-30 [SC] [expires: 2024-10-29]\n      BC83E8A97538EDD4E01DC05EA83C67A6D7F71756\nuid           [ultimate] FK Developer <fk-dev@ibm.com>\nsig 3        A83C67A6D7F71756 2022-10-30  FK Developer <fk-dev@ibm.com>\n```\n\nYou will use the signature to retrieve the public key:\n```\ngpg --armor --export A83C67A6D7F71756\n```\n\nThe public key will look something like below:\n```output\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGNeGNQBEAC/y2tovX5s0Z+onUpisnMMleG94nqOtajXG1N0UbHAUQyKfirt\nO8t91ek+e5PEsVkR/RLIM1M1YkiSV4irxW/uFPucXHZDVH8azfnJjf6j6cXWt/ra\n1I2vGV3dIIQ6aJIBEEXC+u+N6rWpCOF5ERVrumGFlDhL/PY8Y9NM0cNQCbOcciTV\n5a5DrqyHC3RD5Bcn5EA0/5ISTCGQyEbJe45G8L+a5yRchn4ACVEztR2B/O5iOZbM\n.\n.\n.\n4ojOJPu0n5QLA5cI3RyZFw==\n=sx91\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\nNow that you have the signature, you can configure Git to sign commits:\n```\ngit config --global user.signingkey A83C67A6D7F71756\n```\n\nNext, add your GPG key to your Git user.\n* Go to https://github.com/IBM/cloud-pak-deployer.git\n* Log in using your public GitHub user\n* Click on your user at the top right of the pages\n* Click **select**\n* In the left menu, select **SSH and GPG keys**\n* Click **New GPG key**\n* Enter a meaningful title for your GPG key, for example: **FK Development Server**\n* Paste the public GPG key\n* Confirm by pushing the **Add GPG key** button\n\n\nCommits done on your development server will now be signed with your user name and e-mail address and will show as **Verified** when listing the commits.\n\n\n### Clone the repository\nClone the repository using a `git` command. The command below is the clone of the main Cloud Pak Deployer repository. If you have forked the repository to develop features, you will have to use the URL of your own fork.\n```\ngit clone https://github.com/IBM/cloud-pak-deployer.git\n```\n\n### Connect VSCode to the development server\n* Install the **Remote - SSH** extension in VSCode\n* Click on the green icon in the lower left of VSCode\n* Open SSH Config file, choose the one in your home directory\n* Add the following lines:\n```\nHost nickname_of_your_server\n   HostName ip_address_of_your_server\n   User fk-dev\n```\n\nOnce you have set up this server in the SSH config file, you can connect to it and start remote development. \n* Open\n* Select the `cloud-pak-deployer` directory (this is the cloned repository)\n* As the directory is a cloned Git repo, VSCode will automatically open the default branch\n\nFrom that point forward you can use VSCode as if you were working on your laptop, make changes and use a separate terminal to test your changes.\n\n## Cloud Pak Deployer developer command line option\nThe Cloud Pak Deployer runs as a container on the server. When you're in the process of developing new features, having to always rebuild the image is a bit of a pain, hence we've introduced a special command line parameter.\n\n```\n./cp-deploy.sh env apply .... --cpd-develop [--accept-all-liceneses]\n```\n\nWhen adding the `--cpd-develop` parameter to the command line, the current directory is mapped as a volume to the `/cloud-pak-deployer` directory within the container. This means that any latest changes you've done to the Ansible playbooks or other commands will take effect immediately.\n\n<InlineNotification kind=\"warning\">\nEven though it is possible to run the deployer multiple times in parallel, for different environments, please be aware that is NOT possible when you use the `--cpd-develop` parameter. If you run two deploy processes with this parameters, you will see errors with permissions.\n</InlineNotification>\n\n## Cloud Pak Deployer developer container image tag\nWhen working on multiple changes concurrently, you may have to switch between branches or tags. By default, the Cloud Pak Deployer image is built with image `latest`, but you can override this by setting the `CPD_IMAGE_TAG` environment variable in your session.\n\n```\nexport CPD_IMAGE_TAG=cp4d-460\n./cp-deploy.sh build\n```\n\nWhen building the deployer, the image is now tagged:\n```\npodman image ls\n```\n\n```output\nREPOSITORY                           TAG         IMAGE ID      CREATED        SIZE\nlocalhost/cloud-pak-deployer         cp4d-460    8b08cb2f9a2e  8 minutes ago  1.92 GB\n```\n\nWhen running the deployer with the same environment variable set, you will see an additional message in the output.\n```\n./cp-deploy.sh env apply\n```\n\n```output\nCloud Pak Deployer image tag cp4d-460 will be used.\n...\n```\n\n## Cloud Pak Deployer podman or docker command\nBy default, the `cp-deploy.sh` command detects if `podman` (preferred) or `docker` is found on the system. In case both are present, `podman` is used. You can override this behaviour by setting the `CPD_CONTAINER_ENGINE` environment variable.\n\n```\nexport CPD_CONTAINER_ENGINE=docker\n./cp-deploy.sh build\n```\n\n```output\nContainer engine docker will be used.\n```","type":"Mdx","contentDigest":"bd524c08d4b851b804236de50111cc91","owner":"gatsby-plugin-mdx","counter":250},"frontmatter":{"title":"Development setup"},"exports":{},"rawBody":"---\ntitle: Development setup\n---\n\n# Deployer Development Setup\nSetting up a virtual machine or server to develop the Cloud Pak Deployer code. Focuses on initial setup of a server to run the deployer container, setting up Visual Studio Code, issuing GPG keys and running the deployer in development mode.\n\n## Set up a server for development\nWe recommend to use a Red Hat Linux server for development of the Cloud Pak Deployer, either using a virtual server in the cloud or a virtual machine on your workstation. Ideally you run Visual Studio Code on your workstation and connect it to the remote Red Hat Linux server, updating the code and running it immediately from that server.\n\n### Install required packages\nTo allow for remote development, a number of packages need to be installed on the Linux server. Not having these will cause VSCode not to work and the error messages are difficult to debug. To install these packages, run the following as the `root` user:\n```\nyum install -y git podman wget unzip tar gpg pinentry\n```\n\nAdditionally, you can also install EPEL and `screen` to make it easier to keep your session if it gets disconnected.\n```\nyum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm\nyum install -y screen\n```\n\n### Set up development user\nIt is recommended to use a special development user (your user name) on the Linux server, rather than using `root`. Not only will this be more secure; it also prevent destructive mistakes. In the below steps, we create a user `fk-dev` and give it `sudo` permissions.\n\n```\nuseradd -G wheel fk-dev\n```\n\nTo give the `fk-dev` permissions to run commands as `root`, change the `sudo` settings.\n```\nvisudo\n```\n\nScroll down until you see the following line:\n```\n# %wheel        ALL=(ALL)       NOPASSWD: ALL\n```\n\nChange the line to look like this:\n```\n%wheel        ALL=(ALL)       NOPASSWD: ALL\n```\n\nNow, save the file by pressing Esc, followed by `:` and `x`.\n\n### Configure password-less SSH for development user\nEspecially when running the virtual server in the cloud, users would logon using their SSH key. This requires the public key of the workstation to be added to the development user's SSH configuration.\n\nMake sure you run the following commands as the development user (fk-dev):\n```\nmkdir -p ~/.ssh\nchmod 700 ~/.ssh\ntouch ~/.ssh/authorized_keys\nchmod 600 ~/.ssh/authorized_keys\n```\n\nThen, add the public key of your workstation to the `authorized_keys` file.\n```\nvi ~/.ssh/authorized_keys\n```\n\nPress the `i` to enter insert mode for `vi`. Then paste the public SSH key, for example:\n```\nssh-rsa AAAAB3NzaC1yc2EAAAADAXABAAABAQEGUeXJr0ZHy1SPGOntmr/7ixmK3KV8N3q/+0eSfKVTyGbhUO9lC1+oYcDvwMrizAXBJYWkIIwx4WgC77a78....fP3S5WYgqL fk-dev\n```\n\nFinally save the file by pressing Esc, followed by `:` and `x`.\n\n### Configure Git for the development user\nRun the following commands as the development user (fk-dev):\n```\ngit config --global user.name \"Your full name\"\ngit config --global user.email \"your_email_address\"\ngit config --global credential.helper \"cache --timeout=86400\"\n```\n\n### Set up GPG for the development user\nWe also want to ensure that commits are verified (trusted) by signing them with a GPG key. This requires set up on the development server and also on your Git account.\n\nFirst, set up a new GPG key:\n```\ngpg --default-new-key-algo rsa4096 --gen-key\n```\n\nYou will be prompted to specify your user information:\n* Real name: Enter your full name\n* Email address: Your e-mail address that will be used to sign the commits\n\nPress `o` at the following prompt:\n```\nChange (N)ame, (E)mail, or (O)kay/(Q)uit?\n```\n\nThen, you will be prompted for a passphrase. You cannot use a passphrase for your GPG key if you want to use it for automatic signing of commits. Just press Enter multiple times until the GPG key has been generated.\n\nList the signatures of the known keys. You will use the signature to sign the commits and to retrieve the public key.\n```\ngpg --list-signatures\n```\n\nOutput will look something like this:\n```output\n/home/fk-dev/.gnupg/pubring.kbx\n-----------------------------------\npub   rsa4096 2022-10-30 [SC] [expires: 2024-10-29]\n      BC83E8A97538EDD4E01DC05EA83C67A6D7F71756\nuid           [ultimate] FK Developer <fk-dev@ibm.com>\nsig 3        A83C67A6D7F71756 2022-10-30  FK Developer <fk-dev@ibm.com>\n```\n\nYou will use the signature to retrieve the public key:\n```\ngpg --armor --export A83C67A6D7F71756\n```\n\nThe public key will look something like below:\n```output\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGNeGNQBEAC/y2tovX5s0Z+onUpisnMMleG94nqOtajXG1N0UbHAUQyKfirt\nO8t91ek+e5PEsVkR/RLIM1M1YkiSV4irxW/uFPucXHZDVH8azfnJjf6j6cXWt/ra\n1I2vGV3dIIQ6aJIBEEXC+u+N6rWpCOF5ERVrumGFlDhL/PY8Y9NM0cNQCbOcciTV\n5a5DrqyHC3RD5Bcn5EA0/5ISTCGQyEbJe45G8L+a5yRchn4ACVEztR2B/O5iOZbM\n.\n.\n.\n4ojOJPu0n5QLA5cI3RyZFw==\n=sx91\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\nNow that you have the signature, you can configure Git to sign commits:\n```\ngit config --global user.signingkey A83C67A6D7F71756\n```\n\nNext, add your GPG key to your Git user.\n* Go to https://github.com/IBM/cloud-pak-deployer.git\n* Log in using your public GitHub user\n* Click on your user at the top right of the pages\n* Click **select**\n* In the left menu, select **SSH and GPG keys**\n* Click **New GPG key**\n* Enter a meaningful title for your GPG key, for example: **FK Development Server**\n* Paste the public GPG key\n* Confirm by pushing the **Add GPG key** button\n\n\nCommits done on your development server will now be signed with your user name and e-mail address and will show as **Verified** when listing the commits.\n\n\n### Clone the repository\nClone the repository using a `git` command. The command below is the clone of the main Cloud Pak Deployer repository. If you have forked the repository to develop features, you will have to use the URL of your own fork.\n```\ngit clone https://github.com/IBM/cloud-pak-deployer.git\n```\n\n### Connect VSCode to the development server\n* Install the **Remote - SSH** extension in VSCode\n* Click on the green icon in the lower left of VSCode\n* Open SSH Config file, choose the one in your home directory\n* Add the following lines:\n```\nHost nickname_of_your_server\n   HostName ip_address_of_your_server\n   User fk-dev\n```\n\nOnce you have set up this server in the SSH config file, you can connect to it and start remote development. \n* Open\n* Select the `cloud-pak-deployer` directory (this is the cloned repository)\n* As the directory is a cloned Git repo, VSCode will automatically open the default branch\n\nFrom that point forward you can use VSCode as if you were working on your laptop, make changes and use a separate terminal to test your changes.\n\n## Cloud Pak Deployer developer command line option\nThe Cloud Pak Deployer runs as a container on the server. When you're in the process of developing new features, having to always rebuild the image is a bit of a pain, hence we've introduced a special command line parameter.\n\n```\n./cp-deploy.sh env apply .... --cpd-develop [--accept-all-liceneses]\n```\n\nWhen adding the `--cpd-develop` parameter to the command line, the current directory is mapped as a volume to the `/cloud-pak-deployer` directory within the container. This means that any latest changes you've done to the Ansible playbooks or other commands will take effect immediately.\n\n<InlineNotification kind=\"warning\">\nEven though it is possible to run the deployer multiple times in parallel, for different environments, please be aware that is NOT possible when you use the `--cpd-develop` parameter. If you run two deploy processes with this parameters, you will see errors with permissions.\n</InlineNotification>\n\n## Cloud Pak Deployer developer container image tag\nWhen working on multiple changes concurrently, you may have to switch between branches or tags. By default, the Cloud Pak Deployer image is built with image `latest`, but you can override this by setting the `CPD_IMAGE_TAG` environment variable in your session.\n\n```\nexport CPD_IMAGE_TAG=cp4d-460\n./cp-deploy.sh build\n```\n\nWhen building the deployer, the image is now tagged:\n```\npodman image ls\n```\n\n```output\nREPOSITORY                           TAG         IMAGE ID      CREATED        SIZE\nlocalhost/cloud-pak-deployer         cp4d-460    8b08cb2f9a2e  8 minutes ago  1.92 GB\n```\n\nWhen running the deployer with the same environment variable set, you will see an additional message in the output.\n```\n./cp-deploy.sh env apply\n```\n\n```output\nCloud Pak Deployer image tag cp4d-460 will be used.\n...\n```\n\n## Cloud Pak Deployer podman or docker command\nBy default, the `cp-deploy.sh` command detects if `podman` (preferred) or `docker` is found on the system. In case both are present, `podman` is used. You can override this behaviour by setting the `CPD_CONTAINER_ENGINE` environment variable.\n\n```\nexport CPD_CONTAINER_ENGINE=docker\n./cp-deploy.sh build\n```\n\n```output\nContainer engine docker will be used.\n```","fileAbsolutePath":"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/src/pages/development/deployer-development-setup/index.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}