{"componentChunkName":"component---src-pages-cpd-design-objects-cloud-pak-assets-mdx","path":"/cpd-design/objects/cloud-pak-assets/","result":{"pageContext":{"frontmatter":{"title":"Asset configuration for Cloud Paks"},"relativePagePath":"/cpd-design/objects/cloud-pak-assets.mdx","titleType":"page","MdxNode":{"id":"91b84be8-ffb5-531d-9966-632c902ea979","children":[],"parent":"e8a304a8-19e4-5720-a468-f15a0d94e438","internal":{"content":"---\ntitle: Asset configuration for Cloud Paks\n---\n\n# Cloud Pak Asset configuration\n\nThe Cloud Pak Deployer can implement demo assets and accelerators as part of the deployment process to standardize standing up fully-featured demo environments, or to test patches or new versions of the Cloud Pak using pre-defined assets.\n\n## `cp4d_asset`\nA `cp4d_asset` entry defines one or more assets to be deployed for a specific Cloud Pak for Data instance (OpenShift project). In the configuration, a directory relative to the configuration directory (`CONFIG_DIR`) is specified. For example, if the directory where the configuration is stored is `/cpd-config/sample` and you specify `assets` as the asset directory, all assets under `/cpd-config/sample/assets` are processed.\n\nYou can create one or more subdirectories under the specified location, each holding an asset to be deployed. The deployer finds all `cp4d-asset.sh` scripts and `cp4d-asset.yaml` Ansible task files and runs them.\n\nThe following runtime attributes will be set prior to running the shell script or the Ansible task:\n* If the Cloud Pak for Data instances has the Common Core Services (CCS) custom resource installed, `cpdctl` is configured for the current Cloud Pak for Data instance and the current context is set to the `admin` user of the instance. This means you can run all `cpdctl` commands without first having to login to Cloud Pak for Data.\n* The current working directory is set to the directory holding the `cp4d-asset.sh` script.\n* When running the `cp4d-asset.sh` shell script, the following environment variables are available:\n    - `CP4D_URL`: Cloud Pak for Data URL\n    - `CP4D_ADMIN_PASSWORD`: Cloud Pak for Data admin password\n    - `CP4D_OCP_PROJECT`: OpenShift project that holds the Cloud Pak for Data instance\n    - `KUBECONFIG`: OpenShift configuration file that allows you to run `oc` commands for the cluster\n\n```\ncp4d_asset:\n- name: sample-asset\n  project: zen-40\n  asset_location: cp4d-assets\n```\n\n#### Property explanation\n| Property | Description                                                          | Mandatory | Allowed values |\n| -------- | -------------------------------------------------------------------- | --------- | -------------- |\n| name     | Name of the asset to be deployed. You can specify as many assets as wanted | Yes       |  |\n| project  | Name of OpenShift project of the matching `cp4d` entry. The cp4d project must exist. | Yes       |  |\n| asset_location | Directory holding the asset(s). This is a directory relative to the config directory (CONFIG_DIR) that was passed to the deployer | Yes |  |\n\n\n#### Asset example\nBelow is an example asset that implements the **Customer Attrition** industry accelerator, which can be found here: https://github.com/IBM/Industry-Accelerators/blob/master/CPD%204.0.1.0/utilities-customer-attrition-prediction-industry-accelerator.tar.gz\n\nTo implement:\n* Download the zip file to the `cp4d-assets` directory in the specified configuration directory\n* Create the `cp4d-asset.sh` shell script (example below)\n* Add a `cp4d_asset` entry to the Cloud Pak for Data config file in the `config` directory (or in any other file with extention `.yaml`)\n\n`cp4d-asset.sh` shell script:\n```\n#!/bin/bash\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\n\n# Function to retrieve project by name\nfunction retrieve_project {\n    project_name=$1\n\n    # First check if project already exists\n    project_id=$(cpdctl project list \\\n        --output json | \\\n        jq -r --arg project_name $project_name \\\n        'if .total_results==0 then \"\" else .resources[] | select(.entity.name == $project_name) | .metadata.guid end')\n\n    echo $project_id\n}\n\n# Function to create a project\nfunction create_project {\n    project_name=$1\n\n    retrieve_project $project_name\n\n    if [ \"$project_id\" != \"\" ];then\n        echo \"Project $project_name already exists\"\n        return\n    else\n        echo \"Creating project $project_name\"\n        storage_id=$(uuidgen)\n        storage=$(jq --arg storage_id $storage_id '. | .guid=$storage_id | .type=\"assetfiles\"' <<< '{}')\n        cpdctl project create --name $project_name --storage \"$storage\"\n    fi\n\n    # Find project_id to return\n    project_id=$(cpdctl project list \\\n        --output json | \\\n        jq -r --arg project_name $project_name \\\n        'if .total_results==0 then \"\" else .resources[] | select(.entity.name == $project_name) | .metadata.guid end')\n}\n\n# Function to import a project\nfunction import_project {\n    project_id=$1\n    zip_file=$2\n    import_id=$(cpdctl asset import start \\\n        --project-id $project_id --import-file $zip_file \\\n        --output json --jmes-query \"metadata.id\" --raw-output)\n    \n    cpdctl asset import get --project-id $project_id --import-id $import_id --output json\n\n}\n\n# Function to run jobs\nfunction run_jobs {\n    project_id=$1\n    for job in $(cpdctl job list --project-id $project_id \\\n        --output json | jq -r '.results[] | .metadata.asset_id');do\n        cpdctl job run create --project-id $project_id --job-id $job --job-run \"{}\"\n    done\n}\n\n#\n# Start of the asset code\n#\n\n# Unpack the utilities-customer-attrition-prediction-industry-accelerator directory\nrm -rf /tmp/utilities-customer-attrition-prediction-industry-accelerator\ntar xzf utilities-customer-attrition-prediction-industry-accelerator.tar.gz -C /tmp\nasset_dir=/tmp/customer-attrition-prediction-industry-accelerator\n\n# Change to the asset directory\npushd ${asset_dir} > /dev/null\n\n# Log on to Cloud Pak for Data with the admin user\ncp4d_token=$(curl -s -k -H 'Content-Type: application/json' -X POST $CP4D_URL/icp4d-api/v1/authorize -d '{\"username\": \"admin\", \"password\": \"'$CP4D_ADMIN_PASSWORD'\"}' | jq -r .token)\n\n# Import categories\ncurl -s -k -H 'accept: application/json' -H \"Authorization: Bearer ${cp4d_token}\" -H \"content-type: multipart/form-data\" -X POST $CP4D_URL/v3/governance_artifact_types/category/import?merge_option=all -F \"file=@./utilities-customer-attrition-prediction-glossary-categories.csv;type=text/csv\"\n\n# Import glossary terms\ncurl -s -k -H 'accept: application/json' -H \"Authorization: Bearer ${cp4d_token}\" -H \"content-type: multipart/form-data\" -X POST $CP4D_URL/v3/governance_artifact_types/glossary_term/import?merge_option=all -F \"file=@./utilities-customer-attrition-prediction-glossary-terms.csv;type=text/csv\"\n\n# Check if customer-attrition project already exists. If so, do nothing\nproject_id=$(retrieve_project \"customer-attrition\")\n\n# If project does not exist, import it and run jobs\nif [ \"$project_id\" == \"\" ];then\n    create_project \"customer-attrition\"\n    import_project $project_id \\\n        /tmp/utilities-customer-attrition-prediction-industry-accelerator/utilities-customer-attrition-prediction-analytics-project.zip\n    run_jobs $project_id\nelse\n    echo \"Skipping deployment of CP4D asset, project customer-attrition already exists\"\nfi\n\n# Return to original directory\npopd > /dev/null\n\nexit 0\n```","type":"Mdx","contentDigest":"694656f8441660ddfa06cc5d81a407c5","owner":"gatsby-plugin-mdx","counter":209},"frontmatter":{"title":"Asset configuration for Cloud Paks"},"exports":{},"rawBody":"---\ntitle: Asset configuration for Cloud Paks\n---\n\n# Cloud Pak Asset configuration\n\nThe Cloud Pak Deployer can implement demo assets and accelerators as part of the deployment process to standardize standing up fully-featured demo environments, or to test patches or new versions of the Cloud Pak using pre-defined assets.\n\n## `cp4d_asset`\nA `cp4d_asset` entry defines one or more assets to be deployed for a specific Cloud Pak for Data instance (OpenShift project). In the configuration, a directory relative to the configuration directory (`CONFIG_DIR`) is specified. For example, if the directory where the configuration is stored is `/cpd-config/sample` and you specify `assets` as the asset directory, all assets under `/cpd-config/sample/assets` are processed.\n\nYou can create one or more subdirectories under the specified location, each holding an asset to be deployed. The deployer finds all `cp4d-asset.sh` scripts and `cp4d-asset.yaml` Ansible task files and runs them.\n\nThe following runtime attributes will be set prior to running the shell script or the Ansible task:\n* If the Cloud Pak for Data instances has the Common Core Services (CCS) custom resource installed, `cpdctl` is configured for the current Cloud Pak for Data instance and the current context is set to the `admin` user of the instance. This means you can run all `cpdctl` commands without first having to login to Cloud Pak for Data.\n* The current working directory is set to the directory holding the `cp4d-asset.sh` script.\n* When running the `cp4d-asset.sh` shell script, the following environment variables are available:\n    - `CP4D_URL`: Cloud Pak for Data URL\n    - `CP4D_ADMIN_PASSWORD`: Cloud Pak for Data admin password\n    - `CP4D_OCP_PROJECT`: OpenShift project that holds the Cloud Pak for Data instance\n    - `KUBECONFIG`: OpenShift configuration file that allows you to run `oc` commands for the cluster\n\n```\ncp4d_asset:\n- name: sample-asset\n  project: zen-40\n  asset_location: cp4d-assets\n```\n\n#### Property explanation\n| Property | Description                                                          | Mandatory | Allowed values |\n| -------- | -------------------------------------------------------------------- | --------- | -------------- |\n| name     | Name of the asset to be deployed. You can specify as many assets as wanted | Yes       |  |\n| project  | Name of OpenShift project of the matching `cp4d` entry. The cp4d project must exist. | Yes       |  |\n| asset_location | Directory holding the asset(s). This is a directory relative to the config directory (CONFIG_DIR) that was passed to the deployer | Yes |  |\n\n\n#### Asset example\nBelow is an example asset that implements the **Customer Attrition** industry accelerator, which can be found here: https://github.com/IBM/Industry-Accelerators/blob/master/CPD%204.0.1.0/utilities-customer-attrition-prediction-industry-accelerator.tar.gz\n\nTo implement:\n* Download the zip file to the `cp4d-assets` directory in the specified configuration directory\n* Create the `cp4d-asset.sh` shell script (example below)\n* Add a `cp4d_asset` entry to the Cloud Pak for Data config file in the `config` directory (or in any other file with extention `.yaml`)\n\n`cp4d-asset.sh` shell script:\n```\n#!/bin/bash\nSCRIPT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" >/dev/null 2>&1 && pwd )\n\n# Function to retrieve project by name\nfunction retrieve_project {\n    project_name=$1\n\n    # First check if project already exists\n    project_id=$(cpdctl project list \\\n        --output json | \\\n        jq -r --arg project_name $project_name \\\n        'if .total_results==0 then \"\" else .resources[] | select(.entity.name == $project_name) | .metadata.guid end')\n\n    echo $project_id\n}\n\n# Function to create a project\nfunction create_project {\n    project_name=$1\n\n    retrieve_project $project_name\n\n    if [ \"$project_id\" != \"\" ];then\n        echo \"Project $project_name already exists\"\n        return\n    else\n        echo \"Creating project $project_name\"\n        storage_id=$(uuidgen)\n        storage=$(jq --arg storage_id $storage_id '. | .guid=$storage_id | .type=\"assetfiles\"' <<< '{}')\n        cpdctl project create --name $project_name --storage \"$storage\"\n    fi\n\n    # Find project_id to return\n    project_id=$(cpdctl project list \\\n        --output json | \\\n        jq -r --arg project_name $project_name \\\n        'if .total_results==0 then \"\" else .resources[] | select(.entity.name == $project_name) | .metadata.guid end')\n}\n\n# Function to import a project\nfunction import_project {\n    project_id=$1\n    zip_file=$2\n    import_id=$(cpdctl asset import start \\\n        --project-id $project_id --import-file $zip_file \\\n        --output json --jmes-query \"metadata.id\" --raw-output)\n    \n    cpdctl asset import get --project-id $project_id --import-id $import_id --output json\n\n}\n\n# Function to run jobs\nfunction run_jobs {\n    project_id=$1\n    for job in $(cpdctl job list --project-id $project_id \\\n        --output json | jq -r '.results[] | .metadata.asset_id');do\n        cpdctl job run create --project-id $project_id --job-id $job --job-run \"{}\"\n    done\n}\n\n#\n# Start of the asset code\n#\n\n# Unpack the utilities-customer-attrition-prediction-industry-accelerator directory\nrm -rf /tmp/utilities-customer-attrition-prediction-industry-accelerator\ntar xzf utilities-customer-attrition-prediction-industry-accelerator.tar.gz -C /tmp\nasset_dir=/tmp/customer-attrition-prediction-industry-accelerator\n\n# Change to the asset directory\npushd ${asset_dir} > /dev/null\n\n# Log on to Cloud Pak for Data with the admin user\ncp4d_token=$(curl -s -k -H 'Content-Type: application/json' -X POST $CP4D_URL/icp4d-api/v1/authorize -d '{\"username\": \"admin\", \"password\": \"'$CP4D_ADMIN_PASSWORD'\"}' | jq -r .token)\n\n# Import categories\ncurl -s -k -H 'accept: application/json' -H \"Authorization: Bearer ${cp4d_token}\" -H \"content-type: multipart/form-data\" -X POST $CP4D_URL/v3/governance_artifact_types/category/import?merge_option=all -F \"file=@./utilities-customer-attrition-prediction-glossary-categories.csv;type=text/csv\"\n\n# Import glossary terms\ncurl -s -k -H 'accept: application/json' -H \"Authorization: Bearer ${cp4d_token}\" -H \"content-type: multipart/form-data\" -X POST $CP4D_URL/v3/governance_artifact_types/glossary_term/import?merge_option=all -F \"file=@./utilities-customer-attrition-prediction-glossary-terms.csv;type=text/csv\"\n\n# Check if customer-attrition project already exists. If so, do nothing\nproject_id=$(retrieve_project \"customer-attrition\")\n\n# If project does not exist, import it and run jobs\nif [ \"$project_id\" == \"\" ];then\n    create_project \"customer-attrition\"\n    import_project $project_id \\\n        /tmp/utilities-customer-attrition-prediction-industry-accelerator/utilities-customer-attrition-prediction-analytics-project.zip\n    run_jobs $project_id\nelse\n    echo \"Skipping deployment of CP4D asset, project customer-attrition already exists\"\nfi\n\n# Return to original directory\npopd > /dev/null\n\nexit 0\n```","fileAbsolutePath":"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/src/pages/cpd-design/objects/cloud-pak-assets.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}