(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{"013z":function(e,n,t){"use strict";var a=t("q1tI"),o=t.n(a),l=t("NmYn"),c=t.n(l),r=t("Wbzz"),s=t("Xrax"),i=t("k4MR"),d=t("TSYQ"),p=t.n(d),m=t("QH2O"),u=t.n(m),b=t("qKvR"),g=function(e){var n,t=e.title,a=e.theme,o=e.tabs,l=void 0===o?[]:o;return Object(b.b)("div",{className:p()(u.a.pageHeader,(n={},n[u.a.withTabs]=l.length,n[u.a.darkMode]="dark"===a,n))},Object(b.b)("div",{className:"bx--grid"},Object(b.b)("div",{className:"bx--row"},Object(b.b)("div",{className:"bx--col-lg-12"},Object(b.b)("h1",{id:"page-title",className:u.a.text},t)))))},h=t("BAC9"),y=function(e){var n=e.relativePagePath,t=e.repository,a=Object(r.useStaticQuery)("1364590287").site.siteMetadata.repository,o=t||a,l=o.baseUrl,c=o.subDirectory,s=l+"/edit/"+o.branch+c+"/src/pages"+n;return l?Object(b.b)("div",{className:"bx--row "+h.row},Object(b.b)("div",{className:"bx--col"},Object(b.b)("a",{className:h.link,href:s},"Edit this page on GitHub"))):null},O=t("FCXl"),f=t("dI71"),v=t("I8xM"),j=function(e){function n(){return e.apply(this,arguments)||this}return Object(f.a)(n,e),n.prototype.render=function(){var e=this.props,n=e.title,t=e.tabs,a=e.slug,o=a.split("/").filter(Boolean).slice(-1)[0],l=t.map((function(e){var n,t=c()(e,{lower:!0,strict:!0}),l=t===o,s=new RegExp(o+"/?(#.*)?$"),i=a.replace(s,t);return Object(b.b)("li",{key:e,className:p()((n={},n[v.selectedItem]=l,n),v.listItem)},Object(b.b)(r.Link,{className:v.link,to:""+i},e))}));return Object(b.b)("div",{className:v.tabsContainer},Object(b.b)("div",{className:"bx--grid"},Object(b.b)("div",{className:"bx--row"},Object(b.b)("div",{className:"bx--col-lg-12 bx--col-no-gutter"},Object(b.b)("nav",{"aria-label":n},Object(b.b)("ul",{className:v.list},l))))))},n}(o.a.Component),k=t("MjG9"),x=t("CzIb"),_=t("Asxa"),w=t("OIbQ"),P=t.n(w),N=function(e){var n=e.date,t=new Date(n);return n?Object(b.b)(_.c,{className:P.a.row},Object(b.b)(_.a,null,Object(b.b)("div",{className:P.a.text},"Page last updated: ",t.toLocaleDateString("en-GB",{day:"2-digit",year:"numeric",month:"long"})))):null};n.a=function(e){var n=e.pageContext,t=e.children,a=e.location,o=e.Title,l=n.frontmatter,d=void 0===l?{}:l,p=n.relativePagePath,m=n.titleType,u=d.tabs,h=d.title,f=d.theme,v=d.description,_=d.keywords,w=d.date,P=Object(x.a)().interiorTheme,T=Object(r.useStaticQuery)("2456312558").site.pathPrefix,D=T?a.pathname.replace(T,""):a.pathname,E=u?D.split("/").filter(Boolean).slice(-1)[0]||c()(u[0],{lower:!0}):"",C=f||P;return Object(b.b)(i.a,{tabs:u,homepage:!1,theme:C,pageTitle:h,pageDescription:v,pageKeywords:_,titleType:m},Object(b.b)(g,{title:o?Object(b.b)(o,null):h,label:"label",tabs:u,theme:C}),u&&Object(b.b)(j,{title:h,slug:D,tabs:u,currentTab:E}),Object(b.b)(k.a,{padded:!0},t,Object(b.b)(y,{relativePagePath:p}),Object(b.b)(N,{date:w})),Object(b.b)(O.a,{pageContext:n,location:a,slug:D,tabs:u,currentTab:E}),Object(b.b)(s.a,null))}},BAC9:function(e,n,t){e.exports={bxTextTruncateEnd:"EditLink-module--bx--text-truncate--end--2pqje",bxTextTruncateFront:"EditLink-module--bx--text-truncate--front--3_lIE",link:"EditLink-module--link--1qzW3",row:"EditLink-module--row--1B9Gk"}},I8xM:function(e,n,t){e.exports={bxTextTruncateEnd:"PageTabs-module--bx--text-truncate--end--267NA",bxTextTruncateFront:"PageTabs-module--bx--text-truncate--front--3xEQF",tabsContainer:"PageTabs-module--tabs-container--8N4k0",list:"PageTabs-module--list--3eFQc",listItem:"PageTabs-module--list-item--nUmtD",link:"PageTabs-module--link--1mDJ1",selectedItem:"PageTabs-module--selected-item--YPVr3"}},IKph:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return s})),t.d(n,"default",(function(){return p}));var a=t("wx14"),o=t("zLVn"),l=(t("q1tI"),t("7ljp")),c=t("013z"),r=(t("qKvR"),["components"]),s={},i={_frontmatter:s},d=c.a;function p(e){var n=e.components,t=Object(o.a)(e,r);return Object(l.b)(d,Object(a.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Running deployer as a pod for existing OpenShift cluster"),Object(l.b)("h2",null,"Collect cluster credentials"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Cluster: …"),Object(l.b)("li",{parentName:"ul"},"OpenShift admin user: ",Object(l.b)("inlineCode",{parentName:"li"},"kubeadmin")),Object(l.b)("li",{parentName:"ul"},"Password: …")),Object(l.b)("h2",null,"Login to cluster"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"oc login ... --insecure-skip-tls-verify\n")),Object(l.b)("p",null,"Keep the login command, you will need it later to set the vault secret the deployer will use."),Object(l.b)("h2",null,"Create configuration"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'export CONFIG_DIR=$PWD/cpd-config && mkdir -p $CONFIG_DIR/config\n\ncat << EOF > $CONFIG_DIR/config/cpd-config.yaml\n---\nglobal_config:\n  environment_name: demo\n  cloud_platform: existing-ocp\n\nopenshift:\n- name: cpd-demo\n  ocp_version: 4.8\n  cluster_name: cpd-demo\n  domain_name: example.com\n  openshift_storage:\n  - storage_name: nfs-storage\n    storage_type: nfs\n    ocp_storage_class_file: managed-nfs-storage\n    ocp_storage_class_block: managed-nfs-storage\n\ncp4d:\n- project: cpd-instance\n  openshift_cluster_name: cpd-demo\n  cp4d_version: 4.5.0\n  olm_utils: True\n  accept_licenses: True\n  cartridges:\n  - name: cp-foundation\n    license_service:\n      state: disabled\n      threads_per_core: 2\n  - name: lite\n\n#\n# All tested cartridges. To install, change the "state" property to "installed". To uninstall, change the state\n# to "removed" or comment out the entire cartridge. Make sure that the "-" and properties are aligned with the lite\n# cartridge; the "-" is at position 3 and the property starts at position 5.\n#\n\n  - name: analyticsengine \n    size: small \n    state: removed\n\n  - name: bigsql\n    state: removed\n\n  - name: ca\n    size: small\n    instances:\n    - name: ca-instance\n      metastore_ref: ca-metastore\n    state: removed\n\n  - name: cde\n    state: removed\n\n  - name: datagate\n    state: removed\n\n  - name: datastage-ent-plus\n    state: removed\n\n  - name: db2\n    size: small\n    instances:\n    - name: ca-metastore\n      metadata_size_gb: 20\n      data_size_gb: 20\n      backup_size_gb: 20  \n      transactionlog_size_gb: 20\n    state: removed\n\n  - name: db2u\n    state: removed\n\n  - name: db2wh\n    state: removed\n\n  - name: dmc\n    state: removed\n\n  - name: dods\n    size: small\n    state: removed\n\n  - name: dp\n    size: small\n    state: removed\n\n  - name: dv\n    size: small \n    instances:\n    - name: data-virtualization\n    state: removed\n\n  - name: hadoop\n    size: small\n    state: removed\n\n  - name: mdm\n    size: small\n    wkc_enabled: true\n    state: removed\n\n  - name: openpages\n    state: removed\n\n  - name: planning-analytics\n    state: removed\n\n  - name: rstudio\n    size: small\n    state: removed\n\n  - name: spss\n    state: removed\n\n  - name: voice-gateway\n    replicas: 1\n    state: removed\n\n  - name: watson-assistant\n    size: small\n    state: removed\n\n  - name: watson-discovery\n    state: removed\n\n  - name: watson-ks\n    size: small\n    state: removed\n\n  - name: watson-openscale\n    size: small\n    state: removed\n\n  - name: watson-speech\n    stt_size: xsmall\n    tts_size: xsmall\n    state: removed\n\n  - name: wkc\n    size: small\n    state: removed\n\n  - name: wml\n    size: small\n    state: installed\n\n  - name: wml-accelerator\n    replicas: 1\n    size: small\n    state: removed\n\n  - name: wsl\n    state: installed\n\nEOF\n')),Object(l.b)("h2",null,"Prepare the deployer project"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"oc new-project cloud-pak-deployer \n\noc project cloud-pak-deployer\noc create serviceaccount cloud-pak-deployer-sa\noc adm policy add-scc-to-user privileged -z cloud-pak-deployer-sa\noc adm policy add-cluster-role-to-user cluster-admin -z cloud-pak-deployer-sa\n")),Object(l.b)("h2",null,"Build deployer image and push to the internal registry"),Object(l.b)("p",null,"Building the deployer image typically takes ~5 minutes. Only do this if the image has not been built yet."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'if ! oc get istag -n cloud-pak-deployer cloud-pak-deployer:latest --no-headers 2> /dev/null;then \n\ncat << EOF | oc apply -f -\napiVersion: image.openshift.io/v1\nkind: ImageStream\nmetadata:\n  name: cloud-pak-deployer\nspec:\n  lookupPolicy:\n    local: true\nEOF\n\ncat << EOF | oc apply -f -\napiVersion: build.openshift.io/v1\nkind: BuildConfig\nmetadata:\n  name: cloud-pak-deployer-bc\n  namespace: cloud-pak-deployer\nspec:\n  source:\n    type: Git\n    git:\n      uri: https://github.com/IBM/cloud-pak-deployer\n  strategy:\n    type: Docker                      \n  output:\n    to:\n      kind: ImageStreamTag\n      name: cloud-pak-deployer:latest\nEOF\n\n  oc delete build -n cloud-pak-deployer -l buildconfig=cloud-pak-deployer-bc\n  oc start-build -n cloud-pak-deployer bc/cloud-pak-deployer-bc\n\necho "Wait for image to be built and pushed to internal registry..."\nwhile ! oc get istag -n cloud-pak-deployer cloud-pak-deployer:latest 2>/dev/null;do\n  sleep 1\ndone\n\nfi\n')),Object(l.b)("h2",null,"Set configuration"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"oc create cm -n cloud-pak-deployer cloud-pak-deployer-config\noc set data -n cloud-pak-deployer cm/cloud-pak-deployer-config \\\n  --from-file=$CONFIG_DIR/config/cpd-config.yaml\n")),Object(l.b)("h2",null,"Start the deployer job"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"export DEPLOYER_SC=managed-nfs-storage\n\ncat << EOF | oc apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: cloud-pak-deployer-status\n  namespace: cloud-pak-deployer\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: $DEPLOYER_SC\nEOF\n\ncat << EOF | oc apply -f -\napiVersion: batch/v1\nkind: Job\nmetadata:\n  labels:\n    app: cloud-pak-deployer\n  name: cloud-pak-deployer\n  namespace: cloud-pak-deployer\nspec:\n  parallelism: 1\n  completions: 1\n  backoffLimit: 0\n  template:\n    metadata:\n      name: cloud-pak-deployer\n      labels:\n        app: cloud-pak-deployer\n    spec:\n      initContainers:\n      - name: wait-config\n        image: cloud-pak-deployer:latest\n        command: ['sh', '-c', 'until [ -f /tmp/cpd-config-ready ]; do echo Waiting for /tmp/cpd-config-ready file; sleep 1; done; echo \"Configuration is ready, starting deployer\"']\n        env:\n        - name: CONFIG_DIR\n          value: /Data/cpd-config\n        - name: STATUS_DIR\n          value: /Data/cpd-status\n        volumeMounts:\n        - name: config-volume\n          mountPath: /Data/cpd-config/config\n        - name: status-volume\n          mountPath: /Data/cpd-status\n      containers:\n      - name: cloud-pak-deployer\n        image: cloud-pak-deployer:latest\n        imagePullPolicy: Always\n        terminationMessagePath: /dev/termination-log\n        terminationMessagePolicy: File\n        env:\n        - name: CONFIG_DIR\n          value: /Data/cpd-config\n        - name: STATUS_DIR\n          value: /Data/cpd-status\n        volumeMounts:\n        - name: config-volume\n          mountPath: /Data/cpd-config/config\n        - name: status-volume\n          mountPath: /Data/cpd-status\n        command: [\"/bin/sh\",\"-xc\"]\n        args: \n          - /cloud-pak-deployer/cp-deploy.sh env apply -v\n      restartPolicy: Never\n      securityContext:\n        runAsUser: 0\n      serviceAccountName: cloud-pak-deployer-sa\n      volumes:\n      - name: config-volume\n        configMap:\n          name: cloud-pak-deployer-config\n      - name: status-volume\n        persistentVolumeClaim:\n          claimName: cloud-pak-deployer-status        \nEOF\n")),Object(l.b)("p",null,"The OpenShift job consists of 2 containers: ",Object(l.b)("inlineCode",{parentName:"p"},"wait-config")," and ",Object(l.b)("inlineCode",{parentName:"p"},"cloud-pak-deployer"),", where the ",Object(l.b)("inlineCode",{parentName:"p"},"wait-config")," is an “init” container, just waiting for the signal that the deployer can start. In the next steps, the deployer configuration and secrets are created inside the pod, then the configuration is marked “ready” and deployment can start."),Object(l.b)("h2",null,"Copy local configuration and status directory into deployer pod"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"export DEPLOYER_POD=$(oc get po --no-headers -l app=cloud-pak-deployer | head -1 | awk '{print $1}')\n")),Object(l.b)("h2",null,"Prepare for deployer run"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'oc rsh -c wait-config $DEPLOYER_POD /cloud-pak-deployer/cp-deploy.sh vault set \\\n  -vs ibm_cp_entitlement_key -vsv "your_entitlement_key"\noc rsh -c wait-config $DEPLOYER_POD /cloud-pak-deployer/cp-deploy.sh vault set \\\n  -vs cpd-demo-oc-login -vsv "your_oc_login_command"\noc rsh -c wait-config $DEPLOYER_POD /cloud-pak-deployer/cp-deploy.sh vault set \\\n  -vs cp4d_admin_cpd_instance_cpd_demo -vsv "your_cp4d_admin_password"\n\noc rsh -c wait-config $DEPLOYER_POD /cloud-pak-deployer/cp-deploy.sh vault list\n')),Object(l.b)("h2",null,"Mark the configuration ready to start the deployment"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"oc rsh -c wait-config $DEPLOYER_POD bash -c 'touch /tmp/cpd-config-ready; chmod 777 /tmp/cpd-config-ready'\n")),Object(l.b)("h2",null,"Follow the logs of the deployment"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"oc logs -f $DEPLOYER_POD\n")),Object(l.b)("p",null,"In some cases, especially if the OpenShift cluster is remote from where the ",Object(l.b)("inlineCode",{parentName:"p"},"oc")," command is running, the ",Object(l.b)("inlineCode",{parentName:"p"},"oc logs -f")," command may terminate abruptly. "))}p.isMDXComponent=!0},OIbQ:function(e,n,t){e.exports={bxTextTruncateEnd:"last-modified-date-module--bx--text-truncate--end--123zi",bxTextTruncateFront:"last-modified-date-module--bx--text-truncate--front--3xeKz",text:"last-modified-date-module--text--24m-4",row:"last-modified-date-module--row--2BquN"}},QH2O:function(e,n,t){e.exports={bxTextTruncateEnd:"PageHeader-module--bx--text-truncate--end--mZWeX",bxTextTruncateFront:"PageHeader-module--bx--text-truncate--front--3zvrI",pageHeader:"PageHeader-module--page-header--3hIan",darkMode:"PageHeader-module--dark-mode--hBrwL",withTabs:"PageHeader-module--with-tabs--3nKxA",text:"PageHeader-module--text--o9LFq"}}}]);
//# sourceMappingURL=component---src-pages-advanced-run-on-openshift-index-mdx-2b2b3db057594ea4220f.js.map