{"version":3,"sources":["webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/index.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/LastModifiedDate.js","webpack:///./node_modules/gatsby-theme-carbon/src/templates/Default.js","webpack:///./node_modules/gatsby-theme-carbon/src/components/EditLink/EditLink.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageTabs/PageTabs.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/LastModifiedDate/last-modified-date.module.scss","webpack:///./node_modules/gatsby-theme-carbon/src/components/PageHeader/PageHeader.module.scss","webpack:///./src/pages/cpd-design/components/private-registry/index.mdx"],"names":["PageHeader","title","theme","tabs","className","cx","styles","pageHeader","withTabs","length","darkMode","id","text","EditLink","relativePagePath","repositoryProp","repository","useStaticQuery","site","siteMetadata","baseUrl","subDirectory","href","branch","row","link","PageTabs","render","this","props","slug","currentTab","split","filter","Boolean","slice","pageTabs","map","tab","slugifiedTab","slugify","lower","strict","selected","currentTabRegex","RegExp","replace","key","selectedItem","listItem","to","tabsContainer","aria-label","list","React","Component","LastModifiedDate","date","lastModified","Date","toLocaleDateString","day","year","month","Default","pageContext","children","location","Title","frontmatter","titleType","frontmatterTheme","description","keywords","interiorTheme","useMetadata","pathPrefix","pathname","Layout","homepage","pageTitle","pageDescription","pageKeywords","label","Main","padded","NextPrevious","Utils","module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-cpd-design-components-private-registry-index-mdx-e255db1110876c9003ee.js","sourcesContent":["import PageHeader from './PageHeader';\n\nexport default PageHeader;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport styles from './PageHeader.module.scss';\n\nconst PageHeader = ({ title, theme, tabs = [] }) => (\n  <div\n    className={cx(styles.pageHeader, {\n      [styles.withTabs]: tabs.length,\n      [styles.darkMode]: theme === 'dark',\n    })}>\n    <div className=\"bx--grid\">\n      <div className=\"bx--row\">\n        <div className=\"bx--col-lg-12\">\n          <h1 id=\"page-title\" className={styles.text}>\n            {title}\n          </h1>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nPageHeader.propTypes = {\n  /**\n   * Specify the title for the page\n   */\n  title: PropTypes.node,\n};\n\nexport default PageHeader;\n","import EditLink from './EditLink';\n\nexport default EditLink;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { graphql, useStaticQuery } from 'gatsby';\n\nimport { link, row } from './EditLink.module.scss';\n\nconst EditLink = ({ relativePagePath, repository: repositoryProp }) => {\n  const {\n    site: {\n      siteMetadata: { repository },\n    },\n  } = useStaticQuery(graphql`\n    query REPOSITORY_QUERY {\n      site {\n        siteMetadata {\n          repository {\n            baseUrl\n            subDirectory\n            branch\n          }\n        }\n      }\n    }\n  `);\n\n  const { baseUrl, subDirectory, branch } = repositoryProp || repository;\n\n  const href = `${baseUrl}/edit/${branch}${subDirectory}/src/pages${relativePagePath}`;\n\n  return baseUrl ? (\n    <div className={`bx--row ${row}`}>\n      <div className=\"bx--col\">\n        <a className={link} href={href}>\n          Edit this page on GitHub\n        </a>\n      </div>\n    </div>\n  ) : null;\n};\n\nEditLink.propTypes = {\n  repository: PropTypes.shape({\n    baseUrl: PropTypes.string,\n    subDirectory: PropTypes.string,\n    branch: PropTypes.string,\n  }),\n  relativePagePath: PropTypes.string,\n};\n\nexport default EditLink;\n","import PageTabs from './PageTabs';\n\nexport default PageTabs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport slugify from 'slugify';\nimport cx from 'classnames';\n\nimport {\n  tabsContainer,\n  list,\n  selectedItem,\n  listItem,\n  link,\n} from './PageTabs.module.scss';\n\nexport default class PageTabs extends React.Component {\n  render() {\n    const { title, tabs, slug } = this.props;\n    const currentTab = slug.split('/').filter(Boolean).slice(-1)[0];\n\n    const pageTabs = tabs.map((tab) => {\n      const slugifiedTab = slugify(tab, { lower: true, strict: true });\n      const selected = slugifiedTab === currentTab;\n      // matches with or without trailing slash: /?\n      // matches with or without hash link: (#.*)?\n      const currentTabRegex = new RegExp(`${currentTab}/?(#.*)?$`);\n      const href = slug.replace(currentTabRegex, slugifiedTab);\n      return (\n        <li key={tab} className={cx({ [selectedItem]: selected }, listItem)}>\n          <Link className={link} to={`${href}`}>\n            {tab}\n          </Link>\n        </li>\n      );\n    });\n\n    return (\n      <div className={tabsContainer}>\n        <div className=\"bx--grid\">\n          <div className=\"bx--row\">\n            <div className=\"bx--col-lg-12 bx--col-no-gutter\">\n              <nav aria-label={title}>\n                <ul className={list}>{pageTabs}</ul>\n              </nav>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nPageTabs.propTypes = {\n  tabs: PropTypes.array,\n  slug: PropTypes.string,\n};\n","import LastModifiedDate from './LastModifiedDate';\n\nexport default LastModifiedDate;\n","import React from 'react';\nimport { Row, Column } from '../Grid';\nimport styles from './last-modified-date.module.scss';\n\nconst LastModifiedDate = ({ date }) => {\n  const options = {\n    day: '2-digit',\n    year: 'numeric',\n    month: 'long',\n  };\n\n  const lastModified = new Date(date);\n\n  return date ? (\n    <Row className={styles.row}>\n      <Column>\n        <div className={styles.text}>\n          Page last updated: {lastModified.toLocaleDateString('en-GB', options)}\n          {/* // https://www-03preprod.ibm.com/support/knowledgecenter/ibm_style/dates-and-times.html */}\n        </div>\n      </Column>\n    </Row>\n  ) : null;\n};\nexport default LastModifiedDate;\n","import React from 'react';\nimport slugify from 'slugify';\nimport { useStaticQuery, graphql } from 'gatsby';\n\nimport Utils from '../components/Utils';\nimport Layout from '../components/Layout';\nimport PageHeader from '../components/PageHeader';\nimport EditLink from '../components/EditLink';\nimport NextPrevious from '../components/NextPrevious';\nimport PageTabs from '../components/PageTabs';\nimport Main from '../components/Main';\nimport useMetadata from '../util/hooks/useMetadata';\nimport LastModifiedDate from '../components/LastModifiedDate';\n\nconst Default = ({ pageContext, children, location, Title }) => {\n  const { frontmatter = {}, relativePagePath, titleType } = pageContext;\n  const {\n    tabs,\n    title,\n    theme: frontmatterTheme,\n    description,\n    keywords,\n    date,\n  } = frontmatter;\n\n  const { interiorTheme } = useMetadata();\n\n  // get the path prefix if it exists\n  const {\n    site: { pathPrefix },\n  } = useStaticQuery(graphql`\n    query PATH_PREFIX_QUERY {\n      site {\n        pathPrefix\n      }\n    }\n  `);\n\n  // let gatsby handle prefixing\n  const slug = pathPrefix\n    ? location.pathname.replace(pathPrefix, '')\n    : location.pathname;\n\n  const getCurrentTab = () => {\n    if (!tabs) return '';\n    return (\n      slug.split('/').filter(Boolean).slice(-1)[0] ||\n      slugify(tabs[0], { lower: true })\n    );\n  };\n\n  const currentTab = getCurrentTab();\n\n  const theme = frontmatterTheme || interiorTheme;\n\n  return (\n    <Layout\n      tabs={tabs}\n      homepage={false}\n      theme={theme}\n      pageTitle={title}\n      pageDescription={description}\n      pageKeywords={keywords}\n      titleType={titleType}>\n      <PageHeader\n        title={Title ? <Title /> : title}\n        label=\"label\"\n        tabs={tabs}\n        theme={theme}\n      />\n      {tabs && (\n        <PageTabs\n          title={title}\n          slug={slug}\n          tabs={tabs}\n          currentTab={currentTab}\n        />\n      )}\n      <Main padded>\n        {children}\n        <EditLink relativePagePath={relativePagePath} />\n        <LastModifiedDate date={date} />\n      </Main>\n      <NextPrevious\n        pageContext={pageContext}\n        location={location}\n        slug={slug}\n        tabs={tabs}\n        currentTab={currentTab}\n      />\n      <Utils />\n    </Layout>\n  );\n};\n\nexport default Default;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"EditLink-module--bx--text-truncate--end--2pqje\",\"bxTextTruncateFront\":\"EditLink-module--bx--text-truncate--front--3_lIE\",\"link\":\"EditLink-module--link--1qzW3\",\"row\":\"EditLink-module--row--1B9Gk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageTabs-module--bx--text-truncate--end--267NA\",\"bxTextTruncateFront\":\"PageTabs-module--bx--text-truncate--front--3xEQF\",\"tabsContainer\":\"PageTabs-module--tabs-container--8N4k0\",\"list\":\"PageTabs-module--list--3eFQc\",\"listItem\":\"PageTabs-module--list-item--nUmtD\",\"link\":\"PageTabs-module--link--1mDJ1\",\"selectedItem\":\"PageTabs-module--selected-item--YPVr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"last-modified-date-module--bx--text-truncate--end--123zi\",\"bxTextTruncateFront\":\"last-modified-date-module--bx--text-truncate--front--3xeKz\",\"text\":\"last-modified-date-module--text--24m-4\",\"row\":\"last-modified-date-module--row--2BquN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bxTextTruncateEnd\":\"PageHeader-module--bx--text-truncate--end--mZWeX\",\"bxTextTruncateFront\":\"PageHeader-module--bx--text-truncate--front--3zvrI\",\"pageHeader\":\"PageHeader-module--page-header--3hIan\",\"darkMode\":\"PageHeader-module--dark-mode--hBrwL\",\"withTabs\":\"PageHeader-module--with-tabs--3nKxA\",\"text\":\"PageHeader-module--text--o9LFq\"};","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/cloud-pak-deployer/cloud-pak-deployer/doc/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Private registry`}</h1>\n    <p>{`In cases where the OpenShift cluster is in an environment with limited internet connectivity, you may want OpenShift to pull Cloud Pak images from a private image registry (aka container registry). There may also be other reasons for choosing a private registry over the entitled registry.`}</p>\n    <h2>{`Configuring a private registry`}</h2>\n    <p>{`The below steps outline how to configure a private registry for a Cloud Pak deployment. When the `}<inlineCode parentName=\"p\">{`image_registry`}</inlineCode>{` object is referenced by the Cloud Pak object (such as `}<inlineCode parentName=\"p\">{`cp4d`}</inlineCode>{`), the deployer makes the following changes in OpenShift so that images are pulled from the private registry:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Global pull secret: The image registry’s credentials are retrieved from the vault (the secret name must be `}<inlineCode parentName=\"li\">{`image-registry-<name>`}</inlineCode>{` and an entry for the registry is added to the global pull secret (secret `}<inlineCode parentName=\"li\">{`pull-secret`}</inlineCode>{` in project `}<inlineCode parentName=\"li\">{`openshift-config`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\">{`ImageContentSourcePolicy: This is a mapping between the original location of the image, for example `}<inlineCode parentName=\"li\">{`quay.io/opencloudio/zen-metastoredb@sha256:582cac2366dda8520730184dec2c430e51009a854ed9ccea07db9c3390e13b29`}</inlineCode>{` is mapped to `}<inlineCode parentName=\"li\">{`registry.coc.uk.ibm.com:15000/opencloudio/zen-metastoredb@sha256:582cac2366dda8520730184dec2c430e51009a854ed9ccea07db9c3390e13b29`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Image registry settings: OpenShift keeps image registry settings in custom resource `}<inlineCode parentName=\"li\">{`image.config.openshift.io/cluster`}</inlineCode>{`. If a private registry with a self-signed certificate is configured, certificate authority’s PEM secret must be created as a configmap in the `}<inlineCode parentName=\"li\">{`openshift-config`}</inlineCode>{` project. The deployer uses the vault secret referenced in `}<inlineCode parentName=\"li\">{`registry_trusted_ca_secret`}</inlineCode>{` property to create or update the configmap so that OpenShift can connect to the registry in a secure manner. Alternatively, you add the `}<inlineCode parentName=\"li\">{`registry_insecure: true`}</inlineCode>{` property to pull images without checking the certificate.`}</li>\n    </ul>\n    <h3>{`Using the IBM Container Registry as a private registry`}</h3>\n    <p>{`If you want to use a private registry when running the deployer for a ROKS cluster on IBM Cloud, you must use the IBM Container Registry (ICR) service. The deployer will automatically create the specified namespace in the ICR and set up the credentials accordingly. Configure an `}<a parentName=\"p\" {...{\n        \"href\": \"/cloud-pak-deployer/cpd-design/objects/cloud-paks#image_registry\"\n      }}>{`image_registry`}</a>{` object with the host name of the private registry and the namespace that holds the images. An example of using the ICR as a private registry:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`image_registry:\n- name: cpd409\n  registry_host_name: de.icr.io\n  registry_namespace: cpd409\n`}</code></pre>\n    <p>{`The registry host name must end with `}<inlineCode parentName=\"p\">{`icr.io`}</inlineCode>{` and the registry namespace is mandatory. No other properties are needed; the deployer will retrieve them from IBM Cloud.`}</p>\n    <p>{`If you have already created the ICR namespace, create a vault secret for the image registry credentials:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./cp-deploy.sh vault set \\\\\n  -vs image-registry-cpd409\n  -vsv \"admin:very_s3cret\"\n`}</code></pre>\n    <p>{`An example of configuring the private registry for a `}<inlineCode parentName=\"p\">{`cp4d`}</inlineCode>{` object is below:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cp4d:\n- project: zen-40\n  openshift_cluster_name: {{ env_id }}\n  cp4d_version: 4.0.9\n  openshift_storage_name: ocs-storage\n  image_registry_name: cpd409\n`}</code></pre>\n    <p>{`The Cloud Pak for Data installation refers to the `}<inlineCode parentName=\"p\">{`cpd409`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`image_registry`}</inlineCode>{` object.`}</p>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`ibm_cp_entitlement_key`}</inlineCode>{` secret is in the vault at the time of running the deployer, the required images will be mirrored from the entitled registry to the private registry. If all images are already available in the private registry, just specify the `}<inlineCode parentName=\"p\">{`--skip-mirror-images`}</inlineCode>{` flag when you run the deployer.`}</p>\n    <h2>{`Using a private registry for the Cloud Pak installation (non-IBM Cloud)`}</h2>\n    <p>{`Configure an `}<a parentName=\"p\" {...{\n        \"href\": \"/cloud-pak-deployer/cpd-design/objects/cloud-paks#image_registry\"\n      }}>{`image_registry`}</a>{` object with the host name of the private registry and some optional properties such as port number, CA certificate and whether insecure access to the registry is allowed.`}</p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`image_registry:\n- name: cpd409\n  registry_host_name: registry.coc.uk.ibm.com\n  registry_port: 15000\n  registry_trusted_ca_secret: cpd409-ca-bundle\n`}</code></pre>\n    <p>{`To create the vault secret for the image registry credentials:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./cp-deploy.sh vault set \\\\\n  -vs image-registry-cpd409\n  -vsv \"admin:very_s3cret\"\n`}</code></pre>\n    <p>{`To create the vault secret for the CA bundle:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`./cp-deploy.sh vault set \\\\\n  -vs cpd409-ca-bundle\n  -vsf /tmp/ca.crt\n`}</code></pre>\n    <p>{`Where `}<inlineCode parentName=\"p\">{`ca.crt`}</inlineCode>{` looks something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`-----BEGIN CERTIFICATE-----\nMIIFszCCA5ugAwIBAgIUT02v9OdgdvjgQVslCuL0wwCVaE8wDQYJKoZIhvcNAQEL\nBQAwaTELMAkGA1UEBhMCVVMxETAPBgNVBAgMCE5ldyBZb3JrMQ8wDQYDVQQHDAZB\ncm1vbmsxFjAUBgNVBAoMDUlCTSBDbG91ZCBQYWsxHjAcBgNVBAMMFUlCTSBDbG91\n...\nmcutkgtbkq31XYZj0CiM451Qp8KnTx0=\n-----END CERTIFICATE-\n`}</code></pre>\n    <p>{`An example of configuring the private registry for a `}<inlineCode parentName=\"p\">{`cp4d`}</inlineCode>{` object is below:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`cp4d:\n- project: zen-40\n  openshift_cluster_name: {{ env_id }}\n  cp4d_version: 4.0.9\n  openshift_storage_name: ocs-storage\n  image_registry_name: cpd409\n`}</code></pre>\n    <p>{`The Cloud Pak for Data installation refers to the `}<inlineCode parentName=\"p\">{`cpd409`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`image_registry`}</inlineCode>{` object.`}</p>\n    <p>{`If the `}<inlineCode parentName=\"p\">{`ibm_cp_entitlement_key`}</inlineCode>{` secret is in the vault at the time of running the deployer, the required images will be mirrored from the entitled registry to the private registry. If all images are already available in the private registry, just specify the `}<inlineCode parentName=\"p\">{`--skip-mirror-images`}</inlineCode>{` flag when you run the deployer.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}